
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Habit
 * 
 */
export type Habit = $Result.DefaultSelection<Prisma.$HabitPayload>
/**
 * Model AntiHabit
 * 
 */
export type AntiHabit = $Result.DefaultSelection<Prisma.$AntiHabitPayload>
/**
 * Model Alarm
 * 
 */
export type Alarm = $Result.DefaultSelection<Prisma.$AlarmPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model UserFacts
 * 
 */
export type UserFacts = $Result.DefaultSelection<Prisma.$UserFactsPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model TodaySelection
 * 
 */
export type TodaySelection = $Result.DefaultSelection<Prisma.$TodaySelectionPayload>
/**
 * Model VoiceCache
 * 
 */
export type VoiceCache = $Result.DefaultSelection<Prisma.$VoiceCachePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Plan: {
  FREE: 'FREE',
  PRO: 'PRO'
};

export type Plan = (typeof Plan)[keyof typeof Plan]


export const Tone: {
  strict: 'strict',
  balanced: 'balanced',
  light: 'light'
};

export type Tone = (typeof Tone)[keyof typeof Tone]

}

export type Plan = $Enums.Plan

export const Plan: typeof $Enums.Plan

export type Tone = $Enums.Tone

export const Tone: typeof $Enums.Tone

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.habit`: Exposes CRUD operations for the **Habit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Habits
    * const habits = await prisma.habit.findMany()
    * ```
    */
  get habit(): Prisma.HabitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.antiHabit`: Exposes CRUD operations for the **AntiHabit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AntiHabits
    * const antiHabits = await prisma.antiHabit.findMany()
    * ```
    */
  get antiHabit(): Prisma.AntiHabitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alarm`: Exposes CRUD operations for the **Alarm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alarms
    * const alarms = await prisma.alarm.findMany()
    * ```
    */
  get alarm(): Prisma.AlarmDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userFacts`: Exposes CRUD operations for the **UserFacts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFacts
    * const userFacts = await prisma.userFacts.findMany()
    * ```
    */
  get userFacts(): Prisma.UserFactsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.todaySelection`: Exposes CRUD operations for the **TodaySelection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TodaySelections
    * const todaySelections = await prisma.todaySelection.findMany()
    * ```
    */
  get todaySelection(): Prisma.TodaySelectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voiceCache`: Exposes CRUD operations for the **VoiceCache** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VoiceCaches
    * const voiceCaches = await prisma.voiceCache.findMany()
    * ```
    */
  get voiceCache(): Prisma.VoiceCacheDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.3
   * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Habit: 'Habit',
    AntiHabit: 'AntiHabit',
    Alarm: 'Alarm',
    Event: 'Event',
    UserFacts: 'UserFacts',
    Task: 'Task',
    TodaySelection: 'TodaySelection',
    VoiceCache: 'VoiceCache'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "habit" | "antiHabit" | "alarm" | "event" | "userFacts" | "task" | "todaySelection" | "voiceCache"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Habit: {
        payload: Prisma.$HabitPayload<ExtArgs>
        fields: Prisma.HabitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HabitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HabitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          findFirst: {
            args: Prisma.HabitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HabitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          findMany: {
            args: Prisma.HabitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>[]
          }
          create: {
            args: Prisma.HabitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          createMany: {
            args: Prisma.HabitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HabitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>[]
          }
          delete: {
            args: Prisma.HabitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          update: {
            args: Prisma.HabitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          deleteMany: {
            args: Prisma.HabitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HabitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HabitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>[]
          }
          upsert: {
            args: Prisma.HabitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          aggregate: {
            args: Prisma.HabitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHabit>
          }
          groupBy: {
            args: Prisma.HabitGroupByArgs<ExtArgs>
            result: $Utils.Optional<HabitGroupByOutputType>[]
          }
          count: {
            args: Prisma.HabitCountArgs<ExtArgs>
            result: $Utils.Optional<HabitCountAggregateOutputType> | number
          }
        }
      }
      AntiHabit: {
        payload: Prisma.$AntiHabitPayload<ExtArgs>
        fields: Prisma.AntiHabitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AntiHabitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AntiHabitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload>
          }
          findFirst: {
            args: Prisma.AntiHabitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AntiHabitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload>
          }
          findMany: {
            args: Prisma.AntiHabitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload>[]
          }
          create: {
            args: Prisma.AntiHabitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload>
          }
          createMany: {
            args: Prisma.AntiHabitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AntiHabitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload>[]
          }
          delete: {
            args: Prisma.AntiHabitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload>
          }
          update: {
            args: Prisma.AntiHabitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload>
          }
          deleteMany: {
            args: Prisma.AntiHabitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AntiHabitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AntiHabitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload>[]
          }
          upsert: {
            args: Prisma.AntiHabitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntiHabitPayload>
          }
          aggregate: {
            args: Prisma.AntiHabitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAntiHabit>
          }
          groupBy: {
            args: Prisma.AntiHabitGroupByArgs<ExtArgs>
            result: $Utils.Optional<AntiHabitGroupByOutputType>[]
          }
          count: {
            args: Prisma.AntiHabitCountArgs<ExtArgs>
            result: $Utils.Optional<AntiHabitCountAggregateOutputType> | number
          }
        }
      }
      Alarm: {
        payload: Prisma.$AlarmPayload<ExtArgs>
        fields: Prisma.AlarmFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlarmFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlarmFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          findFirst: {
            args: Prisma.AlarmFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlarmFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          findMany: {
            args: Prisma.AlarmFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>[]
          }
          create: {
            args: Prisma.AlarmCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          createMany: {
            args: Prisma.AlarmCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlarmCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>[]
          }
          delete: {
            args: Prisma.AlarmDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          update: {
            args: Prisma.AlarmUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          deleteMany: {
            args: Prisma.AlarmDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlarmUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlarmUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>[]
          }
          upsert: {
            args: Prisma.AlarmUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlarmPayload>
          }
          aggregate: {
            args: Prisma.AlarmAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlarm>
          }
          groupBy: {
            args: Prisma.AlarmGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlarmGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlarmCountArgs<ExtArgs>
            result: $Utils.Optional<AlarmCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      UserFacts: {
        payload: Prisma.$UserFactsPayload<ExtArgs>
        fields: Prisma.UserFactsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFactsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFactsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload>
          }
          findFirst: {
            args: Prisma.UserFactsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFactsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload>
          }
          findMany: {
            args: Prisma.UserFactsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload>[]
          }
          create: {
            args: Prisma.UserFactsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload>
          }
          createMany: {
            args: Prisma.UserFactsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserFactsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload>[]
          }
          delete: {
            args: Prisma.UserFactsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload>
          }
          update: {
            args: Prisma.UserFactsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload>
          }
          deleteMany: {
            args: Prisma.UserFactsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserFactsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserFactsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload>[]
          }
          upsert: {
            args: Prisma.UserFactsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFactsPayload>
          }
          aggregate: {
            args: Prisma.UserFactsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserFacts>
          }
          groupBy: {
            args: Prisma.UserFactsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserFactsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserFactsCountArgs<ExtArgs>
            result: $Utils.Optional<UserFactsCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      TodaySelection: {
        payload: Prisma.$TodaySelectionPayload<ExtArgs>
        fields: Prisma.TodaySelectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TodaySelectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TodaySelectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload>
          }
          findFirst: {
            args: Prisma.TodaySelectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TodaySelectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload>
          }
          findMany: {
            args: Prisma.TodaySelectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload>[]
          }
          create: {
            args: Prisma.TodaySelectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload>
          }
          createMany: {
            args: Prisma.TodaySelectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TodaySelectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload>[]
          }
          delete: {
            args: Prisma.TodaySelectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload>
          }
          update: {
            args: Prisma.TodaySelectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload>
          }
          deleteMany: {
            args: Prisma.TodaySelectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TodaySelectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TodaySelectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload>[]
          }
          upsert: {
            args: Prisma.TodaySelectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TodaySelectionPayload>
          }
          aggregate: {
            args: Prisma.TodaySelectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTodaySelection>
          }
          groupBy: {
            args: Prisma.TodaySelectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TodaySelectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TodaySelectionCountArgs<ExtArgs>
            result: $Utils.Optional<TodaySelectionCountAggregateOutputType> | number
          }
        }
      }
      VoiceCache: {
        payload: Prisma.$VoiceCachePayload<ExtArgs>
        fields: Prisma.VoiceCacheFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoiceCacheFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoiceCacheFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload>
          }
          findFirst: {
            args: Prisma.VoiceCacheFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoiceCacheFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload>
          }
          findMany: {
            args: Prisma.VoiceCacheFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload>[]
          }
          create: {
            args: Prisma.VoiceCacheCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload>
          }
          createMany: {
            args: Prisma.VoiceCacheCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoiceCacheCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload>[]
          }
          delete: {
            args: Prisma.VoiceCacheDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload>
          }
          update: {
            args: Prisma.VoiceCacheUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload>
          }
          deleteMany: {
            args: Prisma.VoiceCacheDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoiceCacheUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoiceCacheUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload>[]
          }
          upsert: {
            args: Prisma.VoiceCacheUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoiceCachePayload>
          }
          aggregate: {
            args: Prisma.VoiceCacheAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoiceCache>
          }
          groupBy: {
            args: Prisma.VoiceCacheGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoiceCacheGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoiceCacheCountArgs<ExtArgs>
            result: $Utils.Optional<VoiceCacheCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    habit?: HabitOmit
    antiHabit?: AntiHabitOmit
    alarm?: AlarmOmit
    event?: EventOmit
    userFacts?: UserFactsOmit
    task?: TaskOmit
    todaySelection?: TodaySelectionOmit
    voiceCache?: VoiceCacheOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    habits: number
    antiHabits: number
    alarms: number
    events: number
    tasks: number
    todaySelections: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    habits?: boolean | UserCountOutputTypeCountHabitsArgs
    antiHabits?: boolean | UserCountOutputTypeCountAntiHabitsArgs
    alarms?: boolean | UserCountOutputTypeCountAlarmsArgs
    events?: boolean | UserCountOutputTypeCountEventsArgs
    tasks?: boolean | UserCountOutputTypeCountTasksArgs
    todaySelections?: boolean | UserCountOutputTypeCountTodaySelectionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHabitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabitWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAntiHabitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AntiHabitWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAlarmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlarmWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTodaySelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TodaySelectionWhereInput
  }


  /**
   * Count Type HabitCountOutputType
   */

  export type HabitCountOutputType = {
    todaySelections: number
  }

  export type HabitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    todaySelections?: boolean | HabitCountOutputTypeCountTodaySelectionsArgs
  }

  // Custom InputTypes
  /**
   * HabitCountOutputType without action
   */
  export type HabitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitCountOutputType
     */
    select?: HabitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HabitCountOutputType without action
   */
  export type HabitCountOutputTypeCountTodaySelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TodaySelectionWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    todaySelections: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    todaySelections?: boolean | TaskCountOutputTypeCountTodaySelectionsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountTodaySelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TodaySelectionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    intensity: number | null
  }

  export type UserSumAggregateOutputType = {
    intensity: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    tz: string | null
    tone: $Enums.Tone | null
    intensity: number | null
    consentRoast: boolean | null
    safeWord: string | null
    plan: $Enums.Plan | null
    mentorId: string | null
    fcmToken: string | null
    nudgesEnabled: boolean | null
    briefsEnabled: boolean | null
    debriefsEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    tz: string | null
    tone: $Enums.Tone | null
    intensity: number | null
    consentRoast: boolean | null
    safeWord: string | null
    plan: $Enums.Plan | null
    mentorId: string | null
    fcmToken: string | null
    nudgesEnabled: boolean | null
    briefsEnabled: boolean | null
    debriefsEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    tz: number
    tone: number
    intensity: number
    consentRoast: number
    safeWord: number
    plan: number
    mentorId: number
    fcmToken: number
    nudgesEnabled: number
    briefsEnabled: number
    debriefsEnabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    intensity?: true
  }

  export type UserSumAggregateInputType = {
    intensity?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    tz?: true
    tone?: true
    intensity?: true
    consentRoast?: true
    safeWord?: true
    plan?: true
    mentorId?: true
    fcmToken?: true
    nudgesEnabled?: true
    briefsEnabled?: true
    debriefsEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    tz?: true
    tone?: true
    intensity?: true
    consentRoast?: true
    safeWord?: true
    plan?: true
    mentorId?: true
    fcmToken?: true
    nudgesEnabled?: true
    briefsEnabled?: true
    debriefsEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    tz?: true
    tone?: true
    intensity?: true
    consentRoast?: true
    safeWord?: true
    plan?: true
    mentorId?: true
    fcmToken?: true
    nudgesEnabled?: true
    briefsEnabled?: true
    debriefsEnabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string | null
    tz: string
    tone: $Enums.Tone
    intensity: number
    consentRoast: boolean
    safeWord: string | null
    plan: $Enums.Plan
    mentorId: string | null
    fcmToken: string | null
    nudgesEnabled: boolean
    briefsEnabled: boolean
    debriefsEnabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    tz?: boolean
    tone?: boolean
    intensity?: boolean
    consentRoast?: boolean
    safeWord?: boolean
    plan?: boolean
    mentorId?: boolean
    fcmToken?: boolean
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    habits?: boolean | User$habitsArgs<ExtArgs>
    antiHabits?: boolean | User$antiHabitsArgs<ExtArgs>
    alarms?: boolean | User$alarmsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    userFacts?: boolean | User$userFactsArgs<ExtArgs>
    tasks?: boolean | User$tasksArgs<ExtArgs>
    todaySelections?: boolean | User$todaySelectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    tz?: boolean
    tone?: boolean
    intensity?: boolean
    consentRoast?: boolean
    safeWord?: boolean
    plan?: boolean
    mentorId?: boolean
    fcmToken?: boolean
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    tz?: boolean
    tone?: boolean
    intensity?: boolean
    consentRoast?: boolean
    safeWord?: boolean
    plan?: boolean
    mentorId?: boolean
    fcmToken?: boolean
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    tz?: boolean
    tone?: boolean
    intensity?: boolean
    consentRoast?: boolean
    safeWord?: boolean
    plan?: boolean
    mentorId?: boolean
    fcmToken?: boolean
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "tz" | "tone" | "intensity" | "consentRoast" | "safeWord" | "plan" | "mentorId" | "fcmToken" | "nudgesEnabled" | "briefsEnabled" | "debriefsEnabled" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    habits?: boolean | User$habitsArgs<ExtArgs>
    antiHabits?: boolean | User$antiHabitsArgs<ExtArgs>
    alarms?: boolean | User$alarmsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    userFacts?: boolean | User$userFactsArgs<ExtArgs>
    tasks?: boolean | User$tasksArgs<ExtArgs>
    todaySelections?: boolean | User$todaySelectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      habits: Prisma.$HabitPayload<ExtArgs>[]
      antiHabits: Prisma.$AntiHabitPayload<ExtArgs>[]
      alarms: Prisma.$AlarmPayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      userFacts: Prisma.$UserFactsPayload<ExtArgs> | null
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      todaySelections: Prisma.$TodaySelectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string | null
      tz: string
      tone: $Enums.Tone
      intensity: number
      consentRoast: boolean
      safeWord: string | null
      plan: $Enums.Plan
      mentorId: string | null
      fcmToken: string | null
      nudgesEnabled: boolean
      briefsEnabled: boolean
      debriefsEnabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    habits<T extends User$habitsArgs<ExtArgs> = {}>(args?: Subset<T, User$habitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    antiHabits<T extends User$antiHabitsArgs<ExtArgs> = {}>(args?: Subset<T, User$antiHabitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alarms<T extends User$alarmsArgs<ExtArgs> = {}>(args?: Subset<T, User$alarmsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends User$eventsArgs<ExtArgs> = {}>(args?: Subset<T, User$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userFacts<T extends User$userFactsArgs<ExtArgs> = {}>(args?: Subset<T, User$userFactsArgs<ExtArgs>>): Prisma__UserFactsClient<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tasks<T extends User$tasksArgs<ExtArgs> = {}>(args?: Subset<T, User$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    todaySelections<T extends User$todaySelectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$todaySelectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly tz: FieldRef<"User", 'String'>
    readonly tone: FieldRef<"User", 'Tone'>
    readonly intensity: FieldRef<"User", 'Int'>
    readonly consentRoast: FieldRef<"User", 'Boolean'>
    readonly safeWord: FieldRef<"User", 'String'>
    readonly plan: FieldRef<"User", 'Plan'>
    readonly mentorId: FieldRef<"User", 'String'>
    readonly fcmToken: FieldRef<"User", 'String'>
    readonly nudgesEnabled: FieldRef<"User", 'Boolean'>
    readonly briefsEnabled: FieldRef<"User", 'Boolean'>
    readonly debriefsEnabled: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.habits
   */
  export type User$habitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    where?: HabitWhereInput
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    cursor?: HabitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * User.antiHabits
   */
  export type User$antiHabitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    where?: AntiHabitWhereInput
    orderBy?: AntiHabitOrderByWithRelationInput | AntiHabitOrderByWithRelationInput[]
    cursor?: AntiHabitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AntiHabitScalarFieldEnum | AntiHabitScalarFieldEnum[]
  }

  /**
   * User.alarms
   */
  export type User$alarmsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    where?: AlarmWhereInput
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    cursor?: AlarmWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * User.events
   */
  export type User$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.userFacts
   */
  export type User$userFactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    where?: UserFactsWhereInput
  }

  /**
   * User.tasks
   */
  export type User$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.todaySelections
   */
  export type User$todaySelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    where?: TodaySelectionWhereInput
    orderBy?: TodaySelectionOrderByWithRelationInput | TodaySelectionOrderByWithRelationInput[]
    cursor?: TodaySelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TodaySelectionScalarFieldEnum | TodaySelectionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Habit
   */

  export type AggregateHabit = {
    _count: HabitCountAggregateOutputType | null
    _avg: HabitAvgAggregateOutputType | null
    _sum: HabitSumAggregateOutputType | null
    _min: HabitMinAggregateOutputType | null
    _max: HabitMaxAggregateOutputType | null
  }

  export type HabitAvgAggregateOutputType = {
    streak: number | null
  }

  export type HabitSumAggregateOutputType = {
    streak: number | null
  }

  export type HabitMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    streak: number | null
    lastTick: Date | null
    color: string | null
    reminderEnabled: boolean | null
    reminderTime: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HabitMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    streak: number | null
    lastTick: Date | null
    color: string | null
    reminderEnabled: boolean | null
    reminderTime: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HabitCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    schedule: number
    streak: number
    lastTick: number
    color: number
    context: number
    reminderEnabled: number
    reminderTime: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HabitAvgAggregateInputType = {
    streak?: true
  }

  export type HabitSumAggregateInputType = {
    streak?: true
  }

  export type HabitMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    streak?: true
    lastTick?: true
    color?: true
    reminderEnabled?: true
    reminderTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HabitMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    streak?: true
    lastTick?: true
    color?: true
    reminderEnabled?: true
    reminderTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HabitCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    schedule?: true
    streak?: true
    lastTick?: true
    color?: true
    context?: true
    reminderEnabled?: true
    reminderTime?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HabitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Habit to aggregate.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Habits
    **/
    _count?: true | HabitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HabitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HabitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HabitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HabitMaxAggregateInputType
  }

  export type GetHabitAggregateType<T extends HabitAggregateArgs> = {
        [P in keyof T & keyof AggregateHabit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHabit[P]>
      : GetScalarType<T[P], AggregateHabit[P]>
  }




  export type HabitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabitWhereInput
    orderBy?: HabitOrderByWithAggregationInput | HabitOrderByWithAggregationInput[]
    by: HabitScalarFieldEnum[] | HabitScalarFieldEnum
    having?: HabitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HabitCountAggregateInputType | true
    _avg?: HabitAvgAggregateInputType
    _sum?: HabitSumAggregateInputType
    _min?: HabitMinAggregateInputType
    _max?: HabitMaxAggregateInputType
  }

  export type HabitGroupByOutputType = {
    id: string
    userId: string
    title: string
    schedule: JsonValue
    streak: number
    lastTick: Date | null
    color: string
    context: JsonValue
    reminderEnabled: boolean
    reminderTime: string | null
    createdAt: Date
    updatedAt: Date
    _count: HabitCountAggregateOutputType | null
    _avg: HabitAvgAggregateOutputType | null
    _sum: HabitSumAggregateOutputType | null
    _min: HabitMinAggregateOutputType | null
    _max: HabitMaxAggregateOutputType | null
  }

  type GetHabitGroupByPayload<T extends HabitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HabitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HabitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HabitGroupByOutputType[P]>
            : GetScalarType<T[P], HabitGroupByOutputType[P]>
        }
      >
    >


  export type HabitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    schedule?: boolean
    streak?: boolean
    lastTick?: boolean
    color?: boolean
    context?: boolean
    reminderEnabled?: boolean
    reminderTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    todaySelections?: boolean | Habit$todaySelectionsArgs<ExtArgs>
    _count?: boolean | HabitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habit"]>

  export type HabitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    schedule?: boolean
    streak?: boolean
    lastTick?: boolean
    color?: boolean
    context?: boolean
    reminderEnabled?: boolean
    reminderTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habit"]>

  export type HabitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    schedule?: boolean
    streak?: boolean
    lastTick?: boolean
    color?: boolean
    context?: boolean
    reminderEnabled?: boolean
    reminderTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habit"]>

  export type HabitSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    schedule?: boolean
    streak?: boolean
    lastTick?: boolean
    color?: boolean
    context?: boolean
    reminderEnabled?: boolean
    reminderTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HabitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "schedule" | "streak" | "lastTick" | "color" | "context" | "reminderEnabled" | "reminderTime" | "createdAt" | "updatedAt", ExtArgs["result"]["habit"]>
  export type HabitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    todaySelections?: boolean | Habit$todaySelectionsArgs<ExtArgs>
    _count?: boolean | HabitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HabitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HabitIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HabitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Habit"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      todaySelections: Prisma.$TodaySelectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      schedule: Prisma.JsonValue
      streak: number
      lastTick: Date | null
      color: string
      context: Prisma.JsonValue
      reminderEnabled: boolean
      reminderTime: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["habit"]>
    composites: {}
  }

  type HabitGetPayload<S extends boolean | null | undefined | HabitDefaultArgs> = $Result.GetResult<Prisma.$HabitPayload, S>

  type HabitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HabitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HabitCountAggregateInputType | true
    }

  export interface HabitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Habit'], meta: { name: 'Habit' } }
    /**
     * Find zero or one Habit that matches the filter.
     * @param {HabitFindUniqueArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HabitFindUniqueArgs>(args: SelectSubset<T, HabitFindUniqueArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Habit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HabitFindUniqueOrThrowArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HabitFindUniqueOrThrowArgs>(args: SelectSubset<T, HabitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Habit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitFindFirstArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HabitFindFirstArgs>(args?: SelectSubset<T, HabitFindFirstArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Habit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitFindFirstOrThrowArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HabitFindFirstOrThrowArgs>(args?: SelectSubset<T, HabitFindFirstOrThrowArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Habits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Habits
     * const habits = await prisma.habit.findMany()
     * 
     * // Get first 10 Habits
     * const habits = await prisma.habit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const habitWithIdOnly = await prisma.habit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HabitFindManyArgs>(args?: SelectSubset<T, HabitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Habit.
     * @param {HabitCreateArgs} args - Arguments to create a Habit.
     * @example
     * // Create one Habit
     * const Habit = await prisma.habit.create({
     *   data: {
     *     // ... data to create a Habit
     *   }
     * })
     * 
     */
    create<T extends HabitCreateArgs>(args: SelectSubset<T, HabitCreateArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Habits.
     * @param {HabitCreateManyArgs} args - Arguments to create many Habits.
     * @example
     * // Create many Habits
     * const habit = await prisma.habit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HabitCreateManyArgs>(args?: SelectSubset<T, HabitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Habits and returns the data saved in the database.
     * @param {HabitCreateManyAndReturnArgs} args - Arguments to create many Habits.
     * @example
     * // Create many Habits
     * const habit = await prisma.habit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Habits and only return the `id`
     * const habitWithIdOnly = await prisma.habit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HabitCreateManyAndReturnArgs>(args?: SelectSubset<T, HabitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Habit.
     * @param {HabitDeleteArgs} args - Arguments to delete one Habit.
     * @example
     * // Delete one Habit
     * const Habit = await prisma.habit.delete({
     *   where: {
     *     // ... filter to delete one Habit
     *   }
     * })
     * 
     */
    delete<T extends HabitDeleteArgs>(args: SelectSubset<T, HabitDeleteArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Habit.
     * @param {HabitUpdateArgs} args - Arguments to update one Habit.
     * @example
     * // Update one Habit
     * const habit = await prisma.habit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HabitUpdateArgs>(args: SelectSubset<T, HabitUpdateArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Habits.
     * @param {HabitDeleteManyArgs} args - Arguments to filter Habits to delete.
     * @example
     * // Delete a few Habits
     * const { count } = await prisma.habit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HabitDeleteManyArgs>(args?: SelectSubset<T, HabitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Habits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Habits
     * const habit = await prisma.habit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HabitUpdateManyArgs>(args: SelectSubset<T, HabitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Habits and returns the data updated in the database.
     * @param {HabitUpdateManyAndReturnArgs} args - Arguments to update many Habits.
     * @example
     * // Update many Habits
     * const habit = await prisma.habit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Habits and only return the `id`
     * const habitWithIdOnly = await prisma.habit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HabitUpdateManyAndReturnArgs>(args: SelectSubset<T, HabitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Habit.
     * @param {HabitUpsertArgs} args - Arguments to update or create a Habit.
     * @example
     * // Update or create a Habit
     * const habit = await prisma.habit.upsert({
     *   create: {
     *     // ... data to create a Habit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Habit we want to update
     *   }
     * })
     */
    upsert<T extends HabitUpsertArgs>(args: SelectSubset<T, HabitUpsertArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Habits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitCountArgs} args - Arguments to filter Habits to count.
     * @example
     * // Count the number of Habits
     * const count = await prisma.habit.count({
     *   where: {
     *     // ... the filter for the Habits we want to count
     *   }
     * })
    **/
    count<T extends HabitCountArgs>(
      args?: Subset<T, HabitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HabitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Habit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HabitAggregateArgs>(args: Subset<T, HabitAggregateArgs>): Prisma.PrismaPromise<GetHabitAggregateType<T>>

    /**
     * Group by Habit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HabitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HabitGroupByArgs['orderBy'] }
        : { orderBy?: HabitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HabitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHabitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Habit model
   */
  readonly fields: HabitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Habit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HabitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    todaySelections<T extends Habit$todaySelectionsArgs<ExtArgs> = {}>(args?: Subset<T, Habit$todaySelectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Habit model
   */
  interface HabitFieldRefs {
    readonly id: FieldRef<"Habit", 'String'>
    readonly userId: FieldRef<"Habit", 'String'>
    readonly title: FieldRef<"Habit", 'String'>
    readonly schedule: FieldRef<"Habit", 'Json'>
    readonly streak: FieldRef<"Habit", 'Int'>
    readonly lastTick: FieldRef<"Habit", 'DateTime'>
    readonly color: FieldRef<"Habit", 'String'>
    readonly context: FieldRef<"Habit", 'Json'>
    readonly reminderEnabled: FieldRef<"Habit", 'Boolean'>
    readonly reminderTime: FieldRef<"Habit", 'String'>
    readonly createdAt: FieldRef<"Habit", 'DateTime'>
    readonly updatedAt: FieldRef<"Habit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Habit findUnique
   */
  export type HabitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit findUniqueOrThrow
   */
  export type HabitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit findFirst
   */
  export type HabitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habits.
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habits.
     */
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Habit findFirstOrThrow
   */
  export type HabitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habits.
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habits.
     */
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Habit findMany
   */
  export type HabitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habits to fetch.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Habits.
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Habit create
   */
  export type HabitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * The data needed to create a Habit.
     */
    data: XOR<HabitCreateInput, HabitUncheckedCreateInput>
  }

  /**
   * Habit createMany
   */
  export type HabitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Habits.
     */
    data: HabitCreateManyInput | HabitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Habit createManyAndReturn
   */
  export type HabitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * The data used to create many Habits.
     */
    data: HabitCreateManyInput | HabitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Habit update
   */
  export type HabitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * The data needed to update a Habit.
     */
    data: XOR<HabitUpdateInput, HabitUncheckedUpdateInput>
    /**
     * Choose, which Habit to update.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit updateMany
   */
  export type HabitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Habits.
     */
    data: XOR<HabitUpdateManyMutationInput, HabitUncheckedUpdateManyInput>
    /**
     * Filter which Habits to update
     */
    where?: HabitWhereInput
    /**
     * Limit how many Habits to update.
     */
    limit?: number
  }

  /**
   * Habit updateManyAndReturn
   */
  export type HabitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * The data used to update Habits.
     */
    data: XOR<HabitUpdateManyMutationInput, HabitUncheckedUpdateManyInput>
    /**
     * Filter which Habits to update
     */
    where?: HabitWhereInput
    /**
     * Limit how many Habits to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Habit upsert
   */
  export type HabitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * The filter to search for the Habit to update in case it exists.
     */
    where: HabitWhereUniqueInput
    /**
     * In case the Habit found by the `where` argument doesn't exist, create a new Habit with this data.
     */
    create: XOR<HabitCreateInput, HabitUncheckedCreateInput>
    /**
     * In case the Habit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HabitUpdateInput, HabitUncheckedUpdateInput>
  }

  /**
   * Habit delete
   */
  export type HabitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter which Habit to delete.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit deleteMany
   */
  export type HabitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Habits to delete
     */
    where?: HabitWhereInput
    /**
     * Limit how many Habits to delete.
     */
    limit?: number
  }

  /**
   * Habit.todaySelections
   */
  export type Habit$todaySelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    where?: TodaySelectionWhereInput
    orderBy?: TodaySelectionOrderByWithRelationInput | TodaySelectionOrderByWithRelationInput[]
    cursor?: TodaySelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TodaySelectionScalarFieldEnum | TodaySelectionScalarFieldEnum[]
  }

  /**
   * Habit without action
   */
  export type HabitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
  }


  /**
   * Model AntiHabit
   */

  export type AggregateAntiHabit = {
    _count: AntiHabitCountAggregateOutputType | null
    _avg: AntiHabitAvgAggregateOutputType | null
    _sum: AntiHabitSumAggregateOutputType | null
    _min: AntiHabitMinAggregateOutputType | null
    _max: AntiHabitMaxAggregateOutputType | null
  }

  export type AntiHabitAvgAggregateOutputType = {
    targetMins: number | null
    cleanStreak: number | null
  }

  export type AntiHabitSumAggregateOutputType = {
    targetMins: number | null
    cleanStreak: number | null
  }

  export type AntiHabitMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    targetMins: number | null
    cleanStreak: number | null
    lastSlip: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AntiHabitMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    targetMins: number | null
    cleanStreak: number | null
    lastSlip: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AntiHabitCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    targetMins: number
    cleanStreak: number
    lastSlip: number
    dangerWin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AntiHabitAvgAggregateInputType = {
    targetMins?: true
    cleanStreak?: true
  }

  export type AntiHabitSumAggregateInputType = {
    targetMins?: true
    cleanStreak?: true
  }

  export type AntiHabitMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    targetMins?: true
    cleanStreak?: true
    lastSlip?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AntiHabitMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    targetMins?: true
    cleanStreak?: true
    lastSlip?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AntiHabitCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    targetMins?: true
    cleanStreak?: true
    lastSlip?: true
    dangerWin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AntiHabitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AntiHabit to aggregate.
     */
    where?: AntiHabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AntiHabits to fetch.
     */
    orderBy?: AntiHabitOrderByWithRelationInput | AntiHabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AntiHabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AntiHabits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AntiHabits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AntiHabits
    **/
    _count?: true | AntiHabitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AntiHabitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AntiHabitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AntiHabitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AntiHabitMaxAggregateInputType
  }

  export type GetAntiHabitAggregateType<T extends AntiHabitAggregateArgs> = {
        [P in keyof T & keyof AggregateAntiHabit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAntiHabit[P]>
      : GetScalarType<T[P], AggregateAntiHabit[P]>
  }




  export type AntiHabitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AntiHabitWhereInput
    orderBy?: AntiHabitOrderByWithAggregationInput | AntiHabitOrderByWithAggregationInput[]
    by: AntiHabitScalarFieldEnum[] | AntiHabitScalarFieldEnum
    having?: AntiHabitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AntiHabitCountAggregateInputType | true
    _avg?: AntiHabitAvgAggregateInputType
    _sum?: AntiHabitSumAggregateInputType
    _min?: AntiHabitMinAggregateInputType
    _max?: AntiHabitMaxAggregateInputType
  }

  export type AntiHabitGroupByOutputType = {
    id: string
    userId: string
    name: string
    targetMins: number
    cleanStreak: number
    lastSlip: Date | null
    dangerWin: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: AntiHabitCountAggregateOutputType | null
    _avg: AntiHabitAvgAggregateOutputType | null
    _sum: AntiHabitSumAggregateOutputType | null
    _min: AntiHabitMinAggregateOutputType | null
    _max: AntiHabitMaxAggregateOutputType | null
  }

  type GetAntiHabitGroupByPayload<T extends AntiHabitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AntiHabitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AntiHabitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AntiHabitGroupByOutputType[P]>
            : GetScalarType<T[P], AntiHabitGroupByOutputType[P]>
        }
      >
    >


  export type AntiHabitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    targetMins?: boolean
    cleanStreak?: boolean
    lastSlip?: boolean
    dangerWin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["antiHabit"]>

  export type AntiHabitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    targetMins?: boolean
    cleanStreak?: boolean
    lastSlip?: boolean
    dangerWin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["antiHabit"]>

  export type AntiHabitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    targetMins?: boolean
    cleanStreak?: boolean
    lastSlip?: boolean
    dangerWin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["antiHabit"]>

  export type AntiHabitSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    targetMins?: boolean
    cleanStreak?: boolean
    lastSlip?: boolean
    dangerWin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AntiHabitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "targetMins" | "cleanStreak" | "lastSlip" | "dangerWin" | "createdAt" | "updatedAt", ExtArgs["result"]["antiHabit"]>
  export type AntiHabitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AntiHabitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AntiHabitIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AntiHabitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AntiHabit"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      targetMins: number
      cleanStreak: number
      lastSlip: Date | null
      dangerWin: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["antiHabit"]>
    composites: {}
  }

  type AntiHabitGetPayload<S extends boolean | null | undefined | AntiHabitDefaultArgs> = $Result.GetResult<Prisma.$AntiHabitPayload, S>

  type AntiHabitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AntiHabitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AntiHabitCountAggregateInputType | true
    }

  export interface AntiHabitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AntiHabit'], meta: { name: 'AntiHabit' } }
    /**
     * Find zero or one AntiHabit that matches the filter.
     * @param {AntiHabitFindUniqueArgs} args - Arguments to find a AntiHabit
     * @example
     * // Get one AntiHabit
     * const antiHabit = await prisma.antiHabit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AntiHabitFindUniqueArgs>(args: SelectSubset<T, AntiHabitFindUniqueArgs<ExtArgs>>): Prisma__AntiHabitClient<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AntiHabit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AntiHabitFindUniqueOrThrowArgs} args - Arguments to find a AntiHabit
     * @example
     * // Get one AntiHabit
     * const antiHabit = await prisma.antiHabit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AntiHabitFindUniqueOrThrowArgs>(args: SelectSubset<T, AntiHabitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AntiHabitClient<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AntiHabit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntiHabitFindFirstArgs} args - Arguments to find a AntiHabit
     * @example
     * // Get one AntiHabit
     * const antiHabit = await prisma.antiHabit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AntiHabitFindFirstArgs>(args?: SelectSubset<T, AntiHabitFindFirstArgs<ExtArgs>>): Prisma__AntiHabitClient<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AntiHabit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntiHabitFindFirstOrThrowArgs} args - Arguments to find a AntiHabit
     * @example
     * // Get one AntiHabit
     * const antiHabit = await prisma.antiHabit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AntiHabitFindFirstOrThrowArgs>(args?: SelectSubset<T, AntiHabitFindFirstOrThrowArgs<ExtArgs>>): Prisma__AntiHabitClient<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AntiHabits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntiHabitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AntiHabits
     * const antiHabits = await prisma.antiHabit.findMany()
     * 
     * // Get first 10 AntiHabits
     * const antiHabits = await prisma.antiHabit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const antiHabitWithIdOnly = await prisma.antiHabit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AntiHabitFindManyArgs>(args?: SelectSubset<T, AntiHabitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AntiHabit.
     * @param {AntiHabitCreateArgs} args - Arguments to create a AntiHabit.
     * @example
     * // Create one AntiHabit
     * const AntiHabit = await prisma.antiHabit.create({
     *   data: {
     *     // ... data to create a AntiHabit
     *   }
     * })
     * 
     */
    create<T extends AntiHabitCreateArgs>(args: SelectSubset<T, AntiHabitCreateArgs<ExtArgs>>): Prisma__AntiHabitClient<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AntiHabits.
     * @param {AntiHabitCreateManyArgs} args - Arguments to create many AntiHabits.
     * @example
     * // Create many AntiHabits
     * const antiHabit = await prisma.antiHabit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AntiHabitCreateManyArgs>(args?: SelectSubset<T, AntiHabitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AntiHabits and returns the data saved in the database.
     * @param {AntiHabitCreateManyAndReturnArgs} args - Arguments to create many AntiHabits.
     * @example
     * // Create many AntiHabits
     * const antiHabit = await prisma.antiHabit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AntiHabits and only return the `id`
     * const antiHabitWithIdOnly = await prisma.antiHabit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AntiHabitCreateManyAndReturnArgs>(args?: SelectSubset<T, AntiHabitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AntiHabit.
     * @param {AntiHabitDeleteArgs} args - Arguments to delete one AntiHabit.
     * @example
     * // Delete one AntiHabit
     * const AntiHabit = await prisma.antiHabit.delete({
     *   where: {
     *     // ... filter to delete one AntiHabit
     *   }
     * })
     * 
     */
    delete<T extends AntiHabitDeleteArgs>(args: SelectSubset<T, AntiHabitDeleteArgs<ExtArgs>>): Prisma__AntiHabitClient<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AntiHabit.
     * @param {AntiHabitUpdateArgs} args - Arguments to update one AntiHabit.
     * @example
     * // Update one AntiHabit
     * const antiHabit = await prisma.antiHabit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AntiHabitUpdateArgs>(args: SelectSubset<T, AntiHabitUpdateArgs<ExtArgs>>): Prisma__AntiHabitClient<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AntiHabits.
     * @param {AntiHabitDeleteManyArgs} args - Arguments to filter AntiHabits to delete.
     * @example
     * // Delete a few AntiHabits
     * const { count } = await prisma.antiHabit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AntiHabitDeleteManyArgs>(args?: SelectSubset<T, AntiHabitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AntiHabits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntiHabitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AntiHabits
     * const antiHabit = await prisma.antiHabit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AntiHabitUpdateManyArgs>(args: SelectSubset<T, AntiHabitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AntiHabits and returns the data updated in the database.
     * @param {AntiHabitUpdateManyAndReturnArgs} args - Arguments to update many AntiHabits.
     * @example
     * // Update many AntiHabits
     * const antiHabit = await prisma.antiHabit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AntiHabits and only return the `id`
     * const antiHabitWithIdOnly = await prisma.antiHabit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AntiHabitUpdateManyAndReturnArgs>(args: SelectSubset<T, AntiHabitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AntiHabit.
     * @param {AntiHabitUpsertArgs} args - Arguments to update or create a AntiHabit.
     * @example
     * // Update or create a AntiHabit
     * const antiHabit = await prisma.antiHabit.upsert({
     *   create: {
     *     // ... data to create a AntiHabit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AntiHabit we want to update
     *   }
     * })
     */
    upsert<T extends AntiHabitUpsertArgs>(args: SelectSubset<T, AntiHabitUpsertArgs<ExtArgs>>): Prisma__AntiHabitClient<$Result.GetResult<Prisma.$AntiHabitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AntiHabits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntiHabitCountArgs} args - Arguments to filter AntiHabits to count.
     * @example
     * // Count the number of AntiHabits
     * const count = await prisma.antiHabit.count({
     *   where: {
     *     // ... the filter for the AntiHabits we want to count
     *   }
     * })
    **/
    count<T extends AntiHabitCountArgs>(
      args?: Subset<T, AntiHabitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AntiHabitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AntiHabit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntiHabitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AntiHabitAggregateArgs>(args: Subset<T, AntiHabitAggregateArgs>): Prisma.PrismaPromise<GetAntiHabitAggregateType<T>>

    /**
     * Group by AntiHabit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntiHabitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AntiHabitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AntiHabitGroupByArgs['orderBy'] }
        : { orderBy?: AntiHabitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AntiHabitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAntiHabitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AntiHabit model
   */
  readonly fields: AntiHabitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AntiHabit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AntiHabitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AntiHabit model
   */
  interface AntiHabitFieldRefs {
    readonly id: FieldRef<"AntiHabit", 'String'>
    readonly userId: FieldRef<"AntiHabit", 'String'>
    readonly name: FieldRef<"AntiHabit", 'String'>
    readonly targetMins: FieldRef<"AntiHabit", 'Int'>
    readonly cleanStreak: FieldRef<"AntiHabit", 'Int'>
    readonly lastSlip: FieldRef<"AntiHabit", 'DateTime'>
    readonly dangerWin: FieldRef<"AntiHabit", 'Json'>
    readonly createdAt: FieldRef<"AntiHabit", 'DateTime'>
    readonly updatedAt: FieldRef<"AntiHabit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AntiHabit findUnique
   */
  export type AntiHabitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    /**
     * Filter, which AntiHabit to fetch.
     */
    where: AntiHabitWhereUniqueInput
  }

  /**
   * AntiHabit findUniqueOrThrow
   */
  export type AntiHabitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    /**
     * Filter, which AntiHabit to fetch.
     */
    where: AntiHabitWhereUniqueInput
  }

  /**
   * AntiHabit findFirst
   */
  export type AntiHabitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    /**
     * Filter, which AntiHabit to fetch.
     */
    where?: AntiHabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AntiHabits to fetch.
     */
    orderBy?: AntiHabitOrderByWithRelationInput | AntiHabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AntiHabits.
     */
    cursor?: AntiHabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AntiHabits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AntiHabits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AntiHabits.
     */
    distinct?: AntiHabitScalarFieldEnum | AntiHabitScalarFieldEnum[]
  }

  /**
   * AntiHabit findFirstOrThrow
   */
  export type AntiHabitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    /**
     * Filter, which AntiHabit to fetch.
     */
    where?: AntiHabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AntiHabits to fetch.
     */
    orderBy?: AntiHabitOrderByWithRelationInput | AntiHabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AntiHabits.
     */
    cursor?: AntiHabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AntiHabits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AntiHabits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AntiHabits.
     */
    distinct?: AntiHabitScalarFieldEnum | AntiHabitScalarFieldEnum[]
  }

  /**
   * AntiHabit findMany
   */
  export type AntiHabitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    /**
     * Filter, which AntiHabits to fetch.
     */
    where?: AntiHabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AntiHabits to fetch.
     */
    orderBy?: AntiHabitOrderByWithRelationInput | AntiHabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AntiHabits.
     */
    cursor?: AntiHabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AntiHabits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AntiHabits.
     */
    skip?: number
    distinct?: AntiHabitScalarFieldEnum | AntiHabitScalarFieldEnum[]
  }

  /**
   * AntiHabit create
   */
  export type AntiHabitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    /**
     * The data needed to create a AntiHabit.
     */
    data: XOR<AntiHabitCreateInput, AntiHabitUncheckedCreateInput>
  }

  /**
   * AntiHabit createMany
   */
  export type AntiHabitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AntiHabits.
     */
    data: AntiHabitCreateManyInput | AntiHabitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AntiHabit createManyAndReturn
   */
  export type AntiHabitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * The data used to create many AntiHabits.
     */
    data: AntiHabitCreateManyInput | AntiHabitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AntiHabit update
   */
  export type AntiHabitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    /**
     * The data needed to update a AntiHabit.
     */
    data: XOR<AntiHabitUpdateInput, AntiHabitUncheckedUpdateInput>
    /**
     * Choose, which AntiHabit to update.
     */
    where: AntiHabitWhereUniqueInput
  }

  /**
   * AntiHabit updateMany
   */
  export type AntiHabitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AntiHabits.
     */
    data: XOR<AntiHabitUpdateManyMutationInput, AntiHabitUncheckedUpdateManyInput>
    /**
     * Filter which AntiHabits to update
     */
    where?: AntiHabitWhereInput
    /**
     * Limit how many AntiHabits to update.
     */
    limit?: number
  }

  /**
   * AntiHabit updateManyAndReturn
   */
  export type AntiHabitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * The data used to update AntiHabits.
     */
    data: XOR<AntiHabitUpdateManyMutationInput, AntiHabitUncheckedUpdateManyInput>
    /**
     * Filter which AntiHabits to update
     */
    where?: AntiHabitWhereInput
    /**
     * Limit how many AntiHabits to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AntiHabit upsert
   */
  export type AntiHabitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    /**
     * The filter to search for the AntiHabit to update in case it exists.
     */
    where: AntiHabitWhereUniqueInput
    /**
     * In case the AntiHabit found by the `where` argument doesn't exist, create a new AntiHabit with this data.
     */
    create: XOR<AntiHabitCreateInput, AntiHabitUncheckedCreateInput>
    /**
     * In case the AntiHabit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AntiHabitUpdateInput, AntiHabitUncheckedUpdateInput>
  }

  /**
   * AntiHabit delete
   */
  export type AntiHabitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
    /**
     * Filter which AntiHabit to delete.
     */
    where: AntiHabitWhereUniqueInput
  }

  /**
   * AntiHabit deleteMany
   */
  export type AntiHabitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AntiHabits to delete
     */
    where?: AntiHabitWhereInput
    /**
     * Limit how many AntiHabits to delete.
     */
    limit?: number
  }

  /**
   * AntiHabit without action
   */
  export type AntiHabitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntiHabit
     */
    select?: AntiHabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntiHabit
     */
    omit?: AntiHabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntiHabitInclude<ExtArgs> | null
  }


  /**
   * Model Alarm
   */

  export type AggregateAlarm = {
    _count: AlarmCountAggregateOutputType | null
    _min: AlarmMinAggregateOutputType | null
    _max: AlarmMaxAggregateOutputType | null
  }

  export type AlarmMinAggregateOutputType = {
    id: string | null
    userId: string | null
    label: string | null
    rrule: string | null
    tone: $Enums.Tone | null
    enabled: boolean | null
    nextRun: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlarmMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    label: string | null
    rrule: string | null
    tone: $Enums.Tone | null
    enabled: boolean | null
    nextRun: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlarmCountAggregateOutputType = {
    id: number
    userId: number
    label: number
    rrule: number
    tone: number
    enabled: number
    nextRun: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlarmMinAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    rrule?: true
    tone?: true
    enabled?: true
    nextRun?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlarmMaxAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    rrule?: true
    tone?: true
    enabled?: true
    nextRun?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlarmCountAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    rrule?: true
    tone?: true
    enabled?: true
    nextRun?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlarmAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alarm to aggregate.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alarms
    **/
    _count?: true | AlarmCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlarmMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlarmMaxAggregateInputType
  }

  export type GetAlarmAggregateType<T extends AlarmAggregateArgs> = {
        [P in keyof T & keyof AggregateAlarm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlarm[P]>
      : GetScalarType<T[P], AggregateAlarm[P]>
  }




  export type AlarmGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlarmWhereInput
    orderBy?: AlarmOrderByWithAggregationInput | AlarmOrderByWithAggregationInput[]
    by: AlarmScalarFieldEnum[] | AlarmScalarFieldEnum
    having?: AlarmScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlarmCountAggregateInputType | true
    _min?: AlarmMinAggregateInputType
    _max?: AlarmMaxAggregateInputType
  }

  export type AlarmGroupByOutputType = {
    id: string
    userId: string
    label: string
    rrule: string
    tone: $Enums.Tone
    enabled: boolean
    nextRun: Date | null
    createdAt: Date
    updatedAt: Date
    _count: AlarmCountAggregateOutputType | null
    _min: AlarmMinAggregateOutputType | null
    _max: AlarmMaxAggregateOutputType | null
  }

  type GetAlarmGroupByPayload<T extends AlarmGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlarmGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlarmGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlarmGroupByOutputType[P]>
            : GetScalarType<T[P], AlarmGroupByOutputType[P]>
        }
      >
    >


  export type AlarmSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    label?: boolean
    rrule?: boolean
    tone?: boolean
    enabled?: boolean
    nextRun?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alarm"]>

  export type AlarmSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    label?: boolean
    rrule?: boolean
    tone?: boolean
    enabled?: boolean
    nextRun?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alarm"]>

  export type AlarmSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    label?: boolean
    rrule?: boolean
    tone?: boolean
    enabled?: boolean
    nextRun?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alarm"]>

  export type AlarmSelectScalar = {
    id?: boolean
    userId?: boolean
    label?: boolean
    rrule?: boolean
    tone?: boolean
    enabled?: boolean
    nextRun?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AlarmOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "label" | "rrule" | "tone" | "enabled" | "nextRun" | "createdAt" | "updatedAt", ExtArgs["result"]["alarm"]>
  export type AlarmInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AlarmIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AlarmIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AlarmPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alarm"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      label: string
      rrule: string
      tone: $Enums.Tone
      enabled: boolean
      nextRun: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["alarm"]>
    composites: {}
  }

  type AlarmGetPayload<S extends boolean | null | undefined | AlarmDefaultArgs> = $Result.GetResult<Prisma.$AlarmPayload, S>

  type AlarmCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlarmFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlarmCountAggregateInputType | true
    }

  export interface AlarmDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alarm'], meta: { name: 'Alarm' } }
    /**
     * Find zero or one Alarm that matches the filter.
     * @param {AlarmFindUniqueArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlarmFindUniqueArgs>(args: SelectSubset<T, AlarmFindUniqueArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alarm that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlarmFindUniqueOrThrowArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlarmFindUniqueOrThrowArgs>(args: SelectSubset<T, AlarmFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alarm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmFindFirstArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlarmFindFirstArgs>(args?: SelectSubset<T, AlarmFindFirstArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alarm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmFindFirstOrThrowArgs} args - Arguments to find a Alarm
     * @example
     * // Get one Alarm
     * const alarm = await prisma.alarm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlarmFindFirstOrThrowArgs>(args?: SelectSubset<T, AlarmFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alarms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alarms
     * const alarms = await prisma.alarm.findMany()
     * 
     * // Get first 10 Alarms
     * const alarms = await prisma.alarm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alarmWithIdOnly = await prisma.alarm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlarmFindManyArgs>(args?: SelectSubset<T, AlarmFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alarm.
     * @param {AlarmCreateArgs} args - Arguments to create a Alarm.
     * @example
     * // Create one Alarm
     * const Alarm = await prisma.alarm.create({
     *   data: {
     *     // ... data to create a Alarm
     *   }
     * })
     * 
     */
    create<T extends AlarmCreateArgs>(args: SelectSubset<T, AlarmCreateArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alarms.
     * @param {AlarmCreateManyArgs} args - Arguments to create many Alarms.
     * @example
     * // Create many Alarms
     * const alarm = await prisma.alarm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlarmCreateManyArgs>(args?: SelectSubset<T, AlarmCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alarms and returns the data saved in the database.
     * @param {AlarmCreateManyAndReturnArgs} args - Arguments to create many Alarms.
     * @example
     * // Create many Alarms
     * const alarm = await prisma.alarm.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alarms and only return the `id`
     * const alarmWithIdOnly = await prisma.alarm.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlarmCreateManyAndReturnArgs>(args?: SelectSubset<T, AlarmCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Alarm.
     * @param {AlarmDeleteArgs} args - Arguments to delete one Alarm.
     * @example
     * // Delete one Alarm
     * const Alarm = await prisma.alarm.delete({
     *   where: {
     *     // ... filter to delete one Alarm
     *   }
     * })
     * 
     */
    delete<T extends AlarmDeleteArgs>(args: SelectSubset<T, AlarmDeleteArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alarm.
     * @param {AlarmUpdateArgs} args - Arguments to update one Alarm.
     * @example
     * // Update one Alarm
     * const alarm = await prisma.alarm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlarmUpdateArgs>(args: SelectSubset<T, AlarmUpdateArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alarms.
     * @param {AlarmDeleteManyArgs} args - Arguments to filter Alarms to delete.
     * @example
     * // Delete a few Alarms
     * const { count } = await prisma.alarm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlarmDeleteManyArgs>(args?: SelectSubset<T, AlarmDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alarms
     * const alarm = await prisma.alarm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlarmUpdateManyArgs>(args: SelectSubset<T, AlarmUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alarms and returns the data updated in the database.
     * @param {AlarmUpdateManyAndReturnArgs} args - Arguments to update many Alarms.
     * @example
     * // Update many Alarms
     * const alarm = await prisma.alarm.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Alarms and only return the `id`
     * const alarmWithIdOnly = await prisma.alarm.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlarmUpdateManyAndReturnArgs>(args: SelectSubset<T, AlarmUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Alarm.
     * @param {AlarmUpsertArgs} args - Arguments to update or create a Alarm.
     * @example
     * // Update or create a Alarm
     * const alarm = await prisma.alarm.upsert({
     *   create: {
     *     // ... data to create a Alarm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alarm we want to update
     *   }
     * })
     */
    upsert<T extends AlarmUpsertArgs>(args: SelectSubset<T, AlarmUpsertArgs<ExtArgs>>): Prisma__AlarmClient<$Result.GetResult<Prisma.$AlarmPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alarms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmCountArgs} args - Arguments to filter Alarms to count.
     * @example
     * // Count the number of Alarms
     * const count = await prisma.alarm.count({
     *   where: {
     *     // ... the filter for the Alarms we want to count
     *   }
     * })
    **/
    count<T extends AlarmCountArgs>(
      args?: Subset<T, AlarmCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlarmCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alarm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlarmAggregateArgs>(args: Subset<T, AlarmAggregateArgs>): Prisma.PrismaPromise<GetAlarmAggregateType<T>>

    /**
     * Group by Alarm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlarmGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlarmGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlarmGroupByArgs['orderBy'] }
        : { orderBy?: AlarmGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlarmGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlarmGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alarm model
   */
  readonly fields: AlarmFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alarm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlarmClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alarm model
   */
  interface AlarmFieldRefs {
    readonly id: FieldRef<"Alarm", 'String'>
    readonly userId: FieldRef<"Alarm", 'String'>
    readonly label: FieldRef<"Alarm", 'String'>
    readonly rrule: FieldRef<"Alarm", 'String'>
    readonly tone: FieldRef<"Alarm", 'Tone'>
    readonly enabled: FieldRef<"Alarm", 'Boolean'>
    readonly nextRun: FieldRef<"Alarm", 'DateTime'>
    readonly createdAt: FieldRef<"Alarm", 'DateTime'>
    readonly updatedAt: FieldRef<"Alarm", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alarm findUnique
   */
  export type AlarmFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm findUniqueOrThrow
   */
  export type AlarmFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm findFirst
   */
  export type AlarmFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alarms.
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alarms.
     */
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Alarm findFirstOrThrow
   */
  export type AlarmFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarm to fetch.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alarms.
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alarms.
     */
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Alarm findMany
   */
  export type AlarmFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter, which Alarms to fetch.
     */
    where?: AlarmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alarms to fetch.
     */
    orderBy?: AlarmOrderByWithRelationInput | AlarmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alarms.
     */
    cursor?: AlarmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alarms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alarms.
     */
    skip?: number
    distinct?: AlarmScalarFieldEnum | AlarmScalarFieldEnum[]
  }

  /**
   * Alarm create
   */
  export type AlarmCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * The data needed to create a Alarm.
     */
    data: XOR<AlarmCreateInput, AlarmUncheckedCreateInput>
  }

  /**
   * Alarm createMany
   */
  export type AlarmCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alarms.
     */
    data: AlarmCreateManyInput | AlarmCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alarm createManyAndReturn
   */
  export type AlarmCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * The data used to create many Alarms.
     */
    data: AlarmCreateManyInput | AlarmCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alarm update
   */
  export type AlarmUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * The data needed to update a Alarm.
     */
    data: XOR<AlarmUpdateInput, AlarmUncheckedUpdateInput>
    /**
     * Choose, which Alarm to update.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm updateMany
   */
  export type AlarmUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alarms.
     */
    data: XOR<AlarmUpdateManyMutationInput, AlarmUncheckedUpdateManyInput>
    /**
     * Filter which Alarms to update
     */
    where?: AlarmWhereInput
    /**
     * Limit how many Alarms to update.
     */
    limit?: number
  }

  /**
   * Alarm updateManyAndReturn
   */
  export type AlarmUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * The data used to update Alarms.
     */
    data: XOR<AlarmUpdateManyMutationInput, AlarmUncheckedUpdateManyInput>
    /**
     * Filter which Alarms to update
     */
    where?: AlarmWhereInput
    /**
     * Limit how many Alarms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alarm upsert
   */
  export type AlarmUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * The filter to search for the Alarm to update in case it exists.
     */
    where: AlarmWhereUniqueInput
    /**
     * In case the Alarm found by the `where` argument doesn't exist, create a new Alarm with this data.
     */
    create: XOR<AlarmCreateInput, AlarmUncheckedCreateInput>
    /**
     * In case the Alarm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlarmUpdateInput, AlarmUncheckedUpdateInput>
  }

  /**
   * Alarm delete
   */
  export type AlarmDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
    /**
     * Filter which Alarm to delete.
     */
    where: AlarmWhereUniqueInput
  }

  /**
   * Alarm deleteMany
   */
  export type AlarmDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alarms to delete
     */
    where?: AlarmWhereInput
    /**
     * Limit how many Alarms to delete.
     */
    limit?: number
  }

  /**
   * Alarm without action
   */
  export type AlarmDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alarm
     */
    select?: AlarmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alarm
     */
    omit?: AlarmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlarmInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    userId: string | null
    ts: Date | null
    type: string | null
    embedding: Uint8Array | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    ts: Date | null
    type: string | null
    embedding: Uint8Array | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    userId: number
    ts: number
    type: number
    payload: number
    embedding: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    userId?: true
    ts?: true
    type?: true
    embedding?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    userId?: true
    ts?: true
    type?: true
    embedding?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    userId?: true
    ts?: true
    type?: true
    payload?: true
    embedding?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    userId: string
    ts: Date
    type: string
    payload: JsonValue
    embedding: Uint8Array | null
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ts?: boolean
    type?: boolean
    payload?: boolean
    embedding?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ts?: boolean
    type?: boolean
    payload?: boolean
    embedding?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ts?: boolean
    type?: boolean
    payload?: boolean
    embedding?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    userId?: boolean
    ts?: boolean
    type?: boolean
    payload?: boolean
    embedding?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "ts" | "type" | "payload" | "embedding", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      ts: Date
      type: string
      payload: Prisma.JsonValue
      embedding: Uint8Array | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly userId: FieldRef<"Event", 'String'>
    readonly ts: FieldRef<"Event", 'DateTime'>
    readonly type: FieldRef<"Event", 'String'>
    readonly payload: FieldRef<"Event", 'Json'>
    readonly embedding: FieldRef<"Event", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model UserFacts
   */

  export type AggregateUserFacts = {
    _count: UserFactsCountAggregateOutputType | null
    _min: UserFactsMinAggregateOutputType | null
    _max: UserFactsMaxAggregateOutputType | null
  }

  export type UserFactsMinAggregateOutputType = {
    userId: string | null
    updatedAt: Date | null
  }

  export type UserFactsMaxAggregateOutputType = {
    userId: string | null
    updatedAt: Date | null
  }

  export type UserFactsCountAggregateOutputType = {
    userId: number
    json: number
    updatedAt: number
    _all: number
  }


  export type UserFactsMinAggregateInputType = {
    userId?: true
    updatedAt?: true
  }

  export type UserFactsMaxAggregateInputType = {
    userId?: true
    updatedAt?: true
  }

  export type UserFactsCountAggregateInputType = {
    userId?: true
    json?: true
    updatedAt?: true
    _all?: true
  }

  export type UserFactsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFacts to aggregate.
     */
    where?: UserFactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFacts to fetch.
     */
    orderBy?: UserFactsOrderByWithRelationInput | UserFactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserFactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFacts
    **/
    _count?: true | UserFactsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFactsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFactsMaxAggregateInputType
  }

  export type GetUserFactsAggregateType<T extends UserFactsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFacts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFacts[P]>
      : GetScalarType<T[P], AggregateUserFacts[P]>
  }




  export type UserFactsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFactsWhereInput
    orderBy?: UserFactsOrderByWithAggregationInput | UserFactsOrderByWithAggregationInput[]
    by: UserFactsScalarFieldEnum[] | UserFactsScalarFieldEnum
    having?: UserFactsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFactsCountAggregateInputType | true
    _min?: UserFactsMinAggregateInputType
    _max?: UserFactsMaxAggregateInputType
  }

  export type UserFactsGroupByOutputType = {
    userId: string
    json: JsonValue
    updatedAt: Date
    _count: UserFactsCountAggregateOutputType | null
    _min: UserFactsMinAggregateOutputType | null
    _max: UserFactsMaxAggregateOutputType | null
  }

  type GetUserFactsGroupByPayload<T extends UserFactsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserFactsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFactsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFactsGroupByOutputType[P]>
            : GetScalarType<T[P], UserFactsGroupByOutputType[P]>
        }
      >
    >


  export type UserFactsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    json?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFacts"]>

  export type UserFactsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    json?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFacts"]>

  export type UserFactsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    json?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFacts"]>

  export type UserFactsSelectScalar = {
    userId?: boolean
    json?: boolean
    updatedAt?: boolean
  }

  export type UserFactsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "json" | "updatedAt", ExtArgs["result"]["userFacts"]>
  export type UserFactsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserFactsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserFactsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserFactsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserFacts"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      json: Prisma.JsonValue
      updatedAt: Date
    }, ExtArgs["result"]["userFacts"]>
    composites: {}
  }

  type UserFactsGetPayload<S extends boolean | null | undefined | UserFactsDefaultArgs> = $Result.GetResult<Prisma.$UserFactsPayload, S>

  type UserFactsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFactsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserFactsCountAggregateInputType | true
    }

  export interface UserFactsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserFacts'], meta: { name: 'UserFacts' } }
    /**
     * Find zero or one UserFacts that matches the filter.
     * @param {UserFactsFindUniqueArgs} args - Arguments to find a UserFacts
     * @example
     * // Get one UserFacts
     * const userFacts = await prisma.userFacts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFactsFindUniqueArgs>(args: SelectSubset<T, UserFactsFindUniqueArgs<ExtArgs>>): Prisma__UserFactsClient<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserFacts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFactsFindUniqueOrThrowArgs} args - Arguments to find a UserFacts
     * @example
     * // Get one UserFacts
     * const userFacts = await prisma.userFacts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFactsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFactsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserFactsClient<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFactsFindFirstArgs} args - Arguments to find a UserFacts
     * @example
     * // Get one UserFacts
     * const userFacts = await prisma.userFacts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFactsFindFirstArgs>(args?: SelectSubset<T, UserFactsFindFirstArgs<ExtArgs>>): Prisma__UserFactsClient<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFacts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFactsFindFirstOrThrowArgs} args - Arguments to find a UserFacts
     * @example
     * // Get one UserFacts
     * const userFacts = await prisma.userFacts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFactsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFactsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserFactsClient<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserFacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFactsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFacts
     * const userFacts = await prisma.userFacts.findMany()
     * 
     * // Get first 10 UserFacts
     * const userFacts = await prisma.userFacts.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userFactsWithUserIdOnly = await prisma.userFacts.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFactsFindManyArgs>(args?: SelectSubset<T, UserFactsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserFacts.
     * @param {UserFactsCreateArgs} args - Arguments to create a UserFacts.
     * @example
     * // Create one UserFacts
     * const UserFacts = await prisma.userFacts.create({
     *   data: {
     *     // ... data to create a UserFacts
     *   }
     * })
     * 
     */
    create<T extends UserFactsCreateArgs>(args: SelectSubset<T, UserFactsCreateArgs<ExtArgs>>): Prisma__UserFactsClient<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserFacts.
     * @param {UserFactsCreateManyArgs} args - Arguments to create many UserFacts.
     * @example
     * // Create many UserFacts
     * const userFacts = await prisma.userFacts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserFactsCreateManyArgs>(args?: SelectSubset<T, UserFactsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserFacts and returns the data saved in the database.
     * @param {UserFactsCreateManyAndReturnArgs} args - Arguments to create many UserFacts.
     * @example
     * // Create many UserFacts
     * const userFacts = await prisma.userFacts.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserFacts and only return the `userId`
     * const userFactsWithUserIdOnly = await prisma.userFacts.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserFactsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserFactsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserFacts.
     * @param {UserFactsDeleteArgs} args - Arguments to delete one UserFacts.
     * @example
     * // Delete one UserFacts
     * const UserFacts = await prisma.userFacts.delete({
     *   where: {
     *     // ... filter to delete one UserFacts
     *   }
     * })
     * 
     */
    delete<T extends UserFactsDeleteArgs>(args: SelectSubset<T, UserFactsDeleteArgs<ExtArgs>>): Prisma__UserFactsClient<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserFacts.
     * @param {UserFactsUpdateArgs} args - Arguments to update one UserFacts.
     * @example
     * // Update one UserFacts
     * const userFacts = await prisma.userFacts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserFactsUpdateArgs>(args: SelectSubset<T, UserFactsUpdateArgs<ExtArgs>>): Prisma__UserFactsClient<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserFacts.
     * @param {UserFactsDeleteManyArgs} args - Arguments to filter UserFacts to delete.
     * @example
     * // Delete a few UserFacts
     * const { count } = await prisma.userFacts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserFactsDeleteManyArgs>(args?: SelectSubset<T, UserFactsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFactsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFacts
     * const userFacts = await prisma.userFacts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserFactsUpdateManyArgs>(args: SelectSubset<T, UserFactsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFacts and returns the data updated in the database.
     * @param {UserFactsUpdateManyAndReturnArgs} args - Arguments to update many UserFacts.
     * @example
     * // Update many UserFacts
     * const userFacts = await prisma.userFacts.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserFacts and only return the `userId`
     * const userFactsWithUserIdOnly = await prisma.userFacts.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserFactsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserFactsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserFacts.
     * @param {UserFactsUpsertArgs} args - Arguments to update or create a UserFacts.
     * @example
     * // Update or create a UserFacts
     * const userFacts = await prisma.userFacts.upsert({
     *   create: {
     *     // ... data to create a UserFacts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFacts we want to update
     *   }
     * })
     */
    upsert<T extends UserFactsUpsertArgs>(args: SelectSubset<T, UserFactsUpsertArgs<ExtArgs>>): Prisma__UserFactsClient<$Result.GetResult<Prisma.$UserFactsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserFacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFactsCountArgs} args - Arguments to filter UserFacts to count.
     * @example
     * // Count the number of UserFacts
     * const count = await prisma.userFacts.count({
     *   where: {
     *     // ... the filter for the UserFacts we want to count
     *   }
     * })
    **/
    count<T extends UserFactsCountArgs>(
      args?: Subset<T, UserFactsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFactsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFactsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFactsAggregateArgs>(args: Subset<T, UserFactsAggregateArgs>): Prisma.PrismaPromise<GetUserFactsAggregateType<T>>

    /**
     * Group by UserFacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFactsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFactsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFactsGroupByArgs['orderBy'] }
        : { orderBy?: UserFactsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFactsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFactsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserFacts model
   */
  readonly fields: UserFactsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFacts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserFactsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserFacts model
   */
  interface UserFactsFieldRefs {
    readonly userId: FieldRef<"UserFacts", 'String'>
    readonly json: FieldRef<"UserFacts", 'Json'>
    readonly updatedAt: FieldRef<"UserFacts", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserFacts findUnique
   */
  export type UserFactsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    /**
     * Filter, which UserFacts to fetch.
     */
    where: UserFactsWhereUniqueInput
  }

  /**
   * UserFacts findUniqueOrThrow
   */
  export type UserFactsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    /**
     * Filter, which UserFacts to fetch.
     */
    where: UserFactsWhereUniqueInput
  }

  /**
   * UserFacts findFirst
   */
  export type UserFactsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    /**
     * Filter, which UserFacts to fetch.
     */
    where?: UserFactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFacts to fetch.
     */
    orderBy?: UserFactsOrderByWithRelationInput | UserFactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFacts.
     */
    cursor?: UserFactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFacts.
     */
    distinct?: UserFactsScalarFieldEnum | UserFactsScalarFieldEnum[]
  }

  /**
   * UserFacts findFirstOrThrow
   */
  export type UserFactsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    /**
     * Filter, which UserFacts to fetch.
     */
    where?: UserFactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFacts to fetch.
     */
    orderBy?: UserFactsOrderByWithRelationInput | UserFactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFacts.
     */
    cursor?: UserFactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFacts.
     */
    distinct?: UserFactsScalarFieldEnum | UserFactsScalarFieldEnum[]
  }

  /**
   * UserFacts findMany
   */
  export type UserFactsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    /**
     * Filter, which UserFacts to fetch.
     */
    where?: UserFactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFacts to fetch.
     */
    orderBy?: UserFactsOrderByWithRelationInput | UserFactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFacts.
     */
    cursor?: UserFactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFacts.
     */
    skip?: number
    distinct?: UserFactsScalarFieldEnum | UserFactsScalarFieldEnum[]
  }

  /**
   * UserFacts create
   */
  export type UserFactsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserFacts.
     */
    data: XOR<UserFactsCreateInput, UserFactsUncheckedCreateInput>
  }

  /**
   * UserFacts createMany
   */
  export type UserFactsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserFacts.
     */
    data: UserFactsCreateManyInput | UserFactsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserFacts createManyAndReturn
   */
  export type UserFactsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * The data used to create many UserFacts.
     */
    data: UserFactsCreateManyInput | UserFactsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserFacts update
   */
  export type UserFactsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserFacts.
     */
    data: XOR<UserFactsUpdateInput, UserFactsUncheckedUpdateInput>
    /**
     * Choose, which UserFacts to update.
     */
    where: UserFactsWhereUniqueInput
  }

  /**
   * UserFacts updateMany
   */
  export type UserFactsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserFacts.
     */
    data: XOR<UserFactsUpdateManyMutationInput, UserFactsUncheckedUpdateManyInput>
    /**
     * Filter which UserFacts to update
     */
    where?: UserFactsWhereInput
    /**
     * Limit how many UserFacts to update.
     */
    limit?: number
  }

  /**
   * UserFacts updateManyAndReturn
   */
  export type UserFactsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * The data used to update UserFacts.
     */
    data: XOR<UserFactsUpdateManyMutationInput, UserFactsUncheckedUpdateManyInput>
    /**
     * Filter which UserFacts to update
     */
    where?: UserFactsWhereInput
    /**
     * Limit how many UserFacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserFacts upsert
   */
  export type UserFactsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserFacts to update in case it exists.
     */
    where: UserFactsWhereUniqueInput
    /**
     * In case the UserFacts found by the `where` argument doesn't exist, create a new UserFacts with this data.
     */
    create: XOR<UserFactsCreateInput, UserFactsUncheckedCreateInput>
    /**
     * In case the UserFacts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserFactsUpdateInput, UserFactsUncheckedUpdateInput>
  }

  /**
   * UserFacts delete
   */
  export type UserFactsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
    /**
     * Filter which UserFacts to delete.
     */
    where: UserFactsWhereUniqueInput
  }

  /**
   * UserFacts deleteMany
   */
  export type UserFactsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFacts to delete
     */
    where?: UserFactsWhereInput
    /**
     * Limit how many UserFacts to delete.
     */
    limit?: number
  }

  /**
   * UserFacts without action
   */
  export type UserFactsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFacts
     */
    select?: UserFactsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFacts
     */
    omit?: UserFactsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFactsInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    priority: number | null
  }

  export type TaskSumAggregateOutputType = {
    priority: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    priority: number | null
    category: string | null
    completed: boolean | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    priority: number | null
    category: string | null
    completed: boolean | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    description: number
    dueDate: number
    schedule: number
    priority: number
    category: number
    completed: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    priority?: true
  }

  export type TaskSumAggregateInputType = {
    priority?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    dueDate?: true
    priority?: true
    category?: true
    completed?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    dueDate?: true
    priority?: true
    category?: true
    completed?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    dueDate?: true
    schedule?: true
    priority?: true
    category?: true
    completed?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    userId: string
    title: string
    description: string | null
    dueDate: Date | null
    schedule: JsonValue
    priority: number
    category: string | null
    completed: boolean
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    schedule?: boolean
    priority?: boolean
    category?: boolean
    completed?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    todaySelections?: boolean | Task$todaySelectionsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    schedule?: boolean
    priority?: boolean
    category?: boolean
    completed?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    schedule?: boolean
    priority?: boolean
    category?: boolean
    completed?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    schedule?: boolean
    priority?: boolean
    category?: boolean
    completed?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "description" | "dueDate" | "schedule" | "priority" | "category" | "completed" | "completedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    todaySelections?: boolean | Task$todaySelectionsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      todaySelections: Prisma.$TodaySelectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      description: string | null
      dueDate: Date | null
      schedule: Prisma.JsonValue
      priority: number
      category: string | null
      completed: boolean
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    todaySelections<T extends Task$todaySelectionsArgs<ExtArgs> = {}>(args?: Subset<T, Task$todaySelectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly userId: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly dueDate: FieldRef<"Task", 'DateTime'>
    readonly schedule: FieldRef<"Task", 'Json'>
    readonly priority: FieldRef<"Task", 'Int'>
    readonly category: FieldRef<"Task", 'String'>
    readonly completed: FieldRef<"Task", 'Boolean'>
    readonly completedAt: FieldRef<"Task", 'DateTime'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.todaySelections
   */
  export type Task$todaySelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    where?: TodaySelectionWhereInput
    orderBy?: TodaySelectionOrderByWithRelationInput | TodaySelectionOrderByWithRelationInput[]
    cursor?: TodaySelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TodaySelectionScalarFieldEnum | TodaySelectionScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model TodaySelection
   */

  export type AggregateTodaySelection = {
    _count: TodaySelectionCountAggregateOutputType | null
    _avg: TodaySelectionAvgAggregateOutputType | null
    _sum: TodaySelectionSumAggregateOutputType | null
    _min: TodaySelectionMinAggregateOutputType | null
    _max: TodaySelectionMaxAggregateOutputType | null
  }

  export type TodaySelectionAvgAggregateOutputType = {
    order: number | null
  }

  export type TodaySelectionSumAggregateOutputType = {
    order: number | null
  }

  export type TodaySelectionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    habitId: string | null
    taskId: string | null
    date: string | null
    order: number | null
    createdAt: Date | null
  }

  export type TodaySelectionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    habitId: string | null
    taskId: string | null
    date: string | null
    order: number | null
    createdAt: Date | null
  }

  export type TodaySelectionCountAggregateOutputType = {
    id: number
    userId: number
    habitId: number
    taskId: number
    date: number
    order: number
    createdAt: number
    _all: number
  }


  export type TodaySelectionAvgAggregateInputType = {
    order?: true
  }

  export type TodaySelectionSumAggregateInputType = {
    order?: true
  }

  export type TodaySelectionMinAggregateInputType = {
    id?: true
    userId?: true
    habitId?: true
    taskId?: true
    date?: true
    order?: true
    createdAt?: true
  }

  export type TodaySelectionMaxAggregateInputType = {
    id?: true
    userId?: true
    habitId?: true
    taskId?: true
    date?: true
    order?: true
    createdAt?: true
  }

  export type TodaySelectionCountAggregateInputType = {
    id?: true
    userId?: true
    habitId?: true
    taskId?: true
    date?: true
    order?: true
    createdAt?: true
    _all?: true
  }

  export type TodaySelectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TodaySelection to aggregate.
     */
    where?: TodaySelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodaySelections to fetch.
     */
    orderBy?: TodaySelectionOrderByWithRelationInput | TodaySelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TodaySelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodaySelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodaySelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TodaySelections
    **/
    _count?: true | TodaySelectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TodaySelectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TodaySelectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TodaySelectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TodaySelectionMaxAggregateInputType
  }

  export type GetTodaySelectionAggregateType<T extends TodaySelectionAggregateArgs> = {
        [P in keyof T & keyof AggregateTodaySelection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodaySelection[P]>
      : GetScalarType<T[P], AggregateTodaySelection[P]>
  }




  export type TodaySelectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TodaySelectionWhereInput
    orderBy?: TodaySelectionOrderByWithAggregationInput | TodaySelectionOrderByWithAggregationInput[]
    by: TodaySelectionScalarFieldEnum[] | TodaySelectionScalarFieldEnum
    having?: TodaySelectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TodaySelectionCountAggregateInputType | true
    _avg?: TodaySelectionAvgAggregateInputType
    _sum?: TodaySelectionSumAggregateInputType
    _min?: TodaySelectionMinAggregateInputType
    _max?: TodaySelectionMaxAggregateInputType
  }

  export type TodaySelectionGroupByOutputType = {
    id: string
    userId: string
    habitId: string | null
    taskId: string | null
    date: string
    order: number
    createdAt: Date
    _count: TodaySelectionCountAggregateOutputType | null
    _avg: TodaySelectionAvgAggregateOutputType | null
    _sum: TodaySelectionSumAggregateOutputType | null
    _min: TodaySelectionMinAggregateOutputType | null
    _max: TodaySelectionMaxAggregateOutputType | null
  }

  type GetTodaySelectionGroupByPayload<T extends TodaySelectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TodaySelectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TodaySelectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TodaySelectionGroupByOutputType[P]>
            : GetScalarType<T[P], TodaySelectionGroupByOutputType[P]>
        }
      >
    >


  export type TodaySelectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    habitId?: boolean
    taskId?: boolean
    date?: boolean
    order?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    habit?: boolean | TodaySelection$habitArgs<ExtArgs>
    task?: boolean | TodaySelection$taskArgs<ExtArgs>
  }, ExtArgs["result"]["todaySelection"]>

  export type TodaySelectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    habitId?: boolean
    taskId?: boolean
    date?: boolean
    order?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    habit?: boolean | TodaySelection$habitArgs<ExtArgs>
    task?: boolean | TodaySelection$taskArgs<ExtArgs>
  }, ExtArgs["result"]["todaySelection"]>

  export type TodaySelectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    habitId?: boolean
    taskId?: boolean
    date?: boolean
    order?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    habit?: boolean | TodaySelection$habitArgs<ExtArgs>
    task?: boolean | TodaySelection$taskArgs<ExtArgs>
  }, ExtArgs["result"]["todaySelection"]>

  export type TodaySelectionSelectScalar = {
    id?: boolean
    userId?: boolean
    habitId?: boolean
    taskId?: boolean
    date?: boolean
    order?: boolean
    createdAt?: boolean
  }

  export type TodaySelectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "habitId" | "taskId" | "date" | "order" | "createdAt", ExtArgs["result"]["todaySelection"]>
  export type TodaySelectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    habit?: boolean | TodaySelection$habitArgs<ExtArgs>
    task?: boolean | TodaySelection$taskArgs<ExtArgs>
  }
  export type TodaySelectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    habit?: boolean | TodaySelection$habitArgs<ExtArgs>
    task?: boolean | TodaySelection$taskArgs<ExtArgs>
  }
  export type TodaySelectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    habit?: boolean | TodaySelection$habitArgs<ExtArgs>
    task?: boolean | TodaySelection$taskArgs<ExtArgs>
  }

  export type $TodaySelectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TodaySelection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      habit: Prisma.$HabitPayload<ExtArgs> | null
      task: Prisma.$TaskPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      habitId: string | null
      taskId: string | null
      date: string
      order: number
      createdAt: Date
    }, ExtArgs["result"]["todaySelection"]>
    composites: {}
  }

  type TodaySelectionGetPayload<S extends boolean | null | undefined | TodaySelectionDefaultArgs> = $Result.GetResult<Prisma.$TodaySelectionPayload, S>

  type TodaySelectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TodaySelectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TodaySelectionCountAggregateInputType | true
    }

  export interface TodaySelectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TodaySelection'], meta: { name: 'TodaySelection' } }
    /**
     * Find zero or one TodaySelection that matches the filter.
     * @param {TodaySelectionFindUniqueArgs} args - Arguments to find a TodaySelection
     * @example
     * // Get one TodaySelection
     * const todaySelection = await prisma.todaySelection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TodaySelectionFindUniqueArgs>(args: SelectSubset<T, TodaySelectionFindUniqueArgs<ExtArgs>>): Prisma__TodaySelectionClient<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TodaySelection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TodaySelectionFindUniqueOrThrowArgs} args - Arguments to find a TodaySelection
     * @example
     * // Get one TodaySelection
     * const todaySelection = await prisma.todaySelection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TodaySelectionFindUniqueOrThrowArgs>(args: SelectSubset<T, TodaySelectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TodaySelectionClient<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TodaySelection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodaySelectionFindFirstArgs} args - Arguments to find a TodaySelection
     * @example
     * // Get one TodaySelection
     * const todaySelection = await prisma.todaySelection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TodaySelectionFindFirstArgs>(args?: SelectSubset<T, TodaySelectionFindFirstArgs<ExtArgs>>): Prisma__TodaySelectionClient<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TodaySelection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodaySelectionFindFirstOrThrowArgs} args - Arguments to find a TodaySelection
     * @example
     * // Get one TodaySelection
     * const todaySelection = await prisma.todaySelection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TodaySelectionFindFirstOrThrowArgs>(args?: SelectSubset<T, TodaySelectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TodaySelectionClient<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TodaySelections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodaySelectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TodaySelections
     * const todaySelections = await prisma.todaySelection.findMany()
     * 
     * // Get first 10 TodaySelections
     * const todaySelections = await prisma.todaySelection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todaySelectionWithIdOnly = await prisma.todaySelection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TodaySelectionFindManyArgs>(args?: SelectSubset<T, TodaySelectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TodaySelection.
     * @param {TodaySelectionCreateArgs} args - Arguments to create a TodaySelection.
     * @example
     * // Create one TodaySelection
     * const TodaySelection = await prisma.todaySelection.create({
     *   data: {
     *     // ... data to create a TodaySelection
     *   }
     * })
     * 
     */
    create<T extends TodaySelectionCreateArgs>(args: SelectSubset<T, TodaySelectionCreateArgs<ExtArgs>>): Prisma__TodaySelectionClient<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TodaySelections.
     * @param {TodaySelectionCreateManyArgs} args - Arguments to create many TodaySelections.
     * @example
     * // Create many TodaySelections
     * const todaySelection = await prisma.todaySelection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TodaySelectionCreateManyArgs>(args?: SelectSubset<T, TodaySelectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TodaySelections and returns the data saved in the database.
     * @param {TodaySelectionCreateManyAndReturnArgs} args - Arguments to create many TodaySelections.
     * @example
     * // Create many TodaySelections
     * const todaySelection = await prisma.todaySelection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TodaySelections and only return the `id`
     * const todaySelectionWithIdOnly = await prisma.todaySelection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TodaySelectionCreateManyAndReturnArgs>(args?: SelectSubset<T, TodaySelectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TodaySelection.
     * @param {TodaySelectionDeleteArgs} args - Arguments to delete one TodaySelection.
     * @example
     * // Delete one TodaySelection
     * const TodaySelection = await prisma.todaySelection.delete({
     *   where: {
     *     // ... filter to delete one TodaySelection
     *   }
     * })
     * 
     */
    delete<T extends TodaySelectionDeleteArgs>(args: SelectSubset<T, TodaySelectionDeleteArgs<ExtArgs>>): Prisma__TodaySelectionClient<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TodaySelection.
     * @param {TodaySelectionUpdateArgs} args - Arguments to update one TodaySelection.
     * @example
     * // Update one TodaySelection
     * const todaySelection = await prisma.todaySelection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TodaySelectionUpdateArgs>(args: SelectSubset<T, TodaySelectionUpdateArgs<ExtArgs>>): Prisma__TodaySelectionClient<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TodaySelections.
     * @param {TodaySelectionDeleteManyArgs} args - Arguments to filter TodaySelections to delete.
     * @example
     * // Delete a few TodaySelections
     * const { count } = await prisma.todaySelection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TodaySelectionDeleteManyArgs>(args?: SelectSubset<T, TodaySelectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TodaySelections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodaySelectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TodaySelections
     * const todaySelection = await prisma.todaySelection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TodaySelectionUpdateManyArgs>(args: SelectSubset<T, TodaySelectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TodaySelections and returns the data updated in the database.
     * @param {TodaySelectionUpdateManyAndReturnArgs} args - Arguments to update many TodaySelections.
     * @example
     * // Update many TodaySelections
     * const todaySelection = await prisma.todaySelection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TodaySelections and only return the `id`
     * const todaySelectionWithIdOnly = await prisma.todaySelection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TodaySelectionUpdateManyAndReturnArgs>(args: SelectSubset<T, TodaySelectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TodaySelection.
     * @param {TodaySelectionUpsertArgs} args - Arguments to update or create a TodaySelection.
     * @example
     * // Update or create a TodaySelection
     * const todaySelection = await prisma.todaySelection.upsert({
     *   create: {
     *     // ... data to create a TodaySelection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TodaySelection we want to update
     *   }
     * })
     */
    upsert<T extends TodaySelectionUpsertArgs>(args: SelectSubset<T, TodaySelectionUpsertArgs<ExtArgs>>): Prisma__TodaySelectionClient<$Result.GetResult<Prisma.$TodaySelectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TodaySelections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodaySelectionCountArgs} args - Arguments to filter TodaySelections to count.
     * @example
     * // Count the number of TodaySelections
     * const count = await prisma.todaySelection.count({
     *   where: {
     *     // ... the filter for the TodaySelections we want to count
     *   }
     * })
    **/
    count<T extends TodaySelectionCountArgs>(
      args?: Subset<T, TodaySelectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TodaySelectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TodaySelection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodaySelectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TodaySelectionAggregateArgs>(args: Subset<T, TodaySelectionAggregateArgs>): Prisma.PrismaPromise<GetTodaySelectionAggregateType<T>>

    /**
     * Group by TodaySelection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodaySelectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TodaySelectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TodaySelectionGroupByArgs['orderBy'] }
        : { orderBy?: TodaySelectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TodaySelectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodaySelectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TodaySelection model
   */
  readonly fields: TodaySelectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TodaySelection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TodaySelectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    habit<T extends TodaySelection$habitArgs<ExtArgs> = {}>(args?: Subset<T, TodaySelection$habitArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    task<T extends TodaySelection$taskArgs<ExtArgs> = {}>(args?: Subset<T, TodaySelection$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TodaySelection model
   */
  interface TodaySelectionFieldRefs {
    readonly id: FieldRef<"TodaySelection", 'String'>
    readonly userId: FieldRef<"TodaySelection", 'String'>
    readonly habitId: FieldRef<"TodaySelection", 'String'>
    readonly taskId: FieldRef<"TodaySelection", 'String'>
    readonly date: FieldRef<"TodaySelection", 'String'>
    readonly order: FieldRef<"TodaySelection", 'Int'>
    readonly createdAt: FieldRef<"TodaySelection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TodaySelection findUnique
   */
  export type TodaySelectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    /**
     * Filter, which TodaySelection to fetch.
     */
    where: TodaySelectionWhereUniqueInput
  }

  /**
   * TodaySelection findUniqueOrThrow
   */
  export type TodaySelectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    /**
     * Filter, which TodaySelection to fetch.
     */
    where: TodaySelectionWhereUniqueInput
  }

  /**
   * TodaySelection findFirst
   */
  export type TodaySelectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    /**
     * Filter, which TodaySelection to fetch.
     */
    where?: TodaySelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodaySelections to fetch.
     */
    orderBy?: TodaySelectionOrderByWithRelationInput | TodaySelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodaySelections.
     */
    cursor?: TodaySelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodaySelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodaySelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodaySelections.
     */
    distinct?: TodaySelectionScalarFieldEnum | TodaySelectionScalarFieldEnum[]
  }

  /**
   * TodaySelection findFirstOrThrow
   */
  export type TodaySelectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    /**
     * Filter, which TodaySelection to fetch.
     */
    where?: TodaySelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodaySelections to fetch.
     */
    orderBy?: TodaySelectionOrderByWithRelationInput | TodaySelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodaySelections.
     */
    cursor?: TodaySelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodaySelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodaySelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodaySelections.
     */
    distinct?: TodaySelectionScalarFieldEnum | TodaySelectionScalarFieldEnum[]
  }

  /**
   * TodaySelection findMany
   */
  export type TodaySelectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    /**
     * Filter, which TodaySelections to fetch.
     */
    where?: TodaySelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodaySelections to fetch.
     */
    orderBy?: TodaySelectionOrderByWithRelationInput | TodaySelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TodaySelections.
     */
    cursor?: TodaySelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodaySelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodaySelections.
     */
    skip?: number
    distinct?: TodaySelectionScalarFieldEnum | TodaySelectionScalarFieldEnum[]
  }

  /**
   * TodaySelection create
   */
  export type TodaySelectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    /**
     * The data needed to create a TodaySelection.
     */
    data: XOR<TodaySelectionCreateInput, TodaySelectionUncheckedCreateInput>
  }

  /**
   * TodaySelection createMany
   */
  export type TodaySelectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TodaySelections.
     */
    data: TodaySelectionCreateManyInput | TodaySelectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TodaySelection createManyAndReturn
   */
  export type TodaySelectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * The data used to create many TodaySelections.
     */
    data: TodaySelectionCreateManyInput | TodaySelectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TodaySelection update
   */
  export type TodaySelectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    /**
     * The data needed to update a TodaySelection.
     */
    data: XOR<TodaySelectionUpdateInput, TodaySelectionUncheckedUpdateInput>
    /**
     * Choose, which TodaySelection to update.
     */
    where: TodaySelectionWhereUniqueInput
  }

  /**
   * TodaySelection updateMany
   */
  export type TodaySelectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TodaySelections.
     */
    data: XOR<TodaySelectionUpdateManyMutationInput, TodaySelectionUncheckedUpdateManyInput>
    /**
     * Filter which TodaySelections to update
     */
    where?: TodaySelectionWhereInput
    /**
     * Limit how many TodaySelections to update.
     */
    limit?: number
  }

  /**
   * TodaySelection updateManyAndReturn
   */
  export type TodaySelectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * The data used to update TodaySelections.
     */
    data: XOR<TodaySelectionUpdateManyMutationInput, TodaySelectionUncheckedUpdateManyInput>
    /**
     * Filter which TodaySelections to update
     */
    where?: TodaySelectionWhereInput
    /**
     * Limit how many TodaySelections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TodaySelection upsert
   */
  export type TodaySelectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    /**
     * The filter to search for the TodaySelection to update in case it exists.
     */
    where: TodaySelectionWhereUniqueInput
    /**
     * In case the TodaySelection found by the `where` argument doesn't exist, create a new TodaySelection with this data.
     */
    create: XOR<TodaySelectionCreateInput, TodaySelectionUncheckedCreateInput>
    /**
     * In case the TodaySelection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TodaySelectionUpdateInput, TodaySelectionUncheckedUpdateInput>
  }

  /**
   * TodaySelection delete
   */
  export type TodaySelectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
    /**
     * Filter which TodaySelection to delete.
     */
    where: TodaySelectionWhereUniqueInput
  }

  /**
   * TodaySelection deleteMany
   */
  export type TodaySelectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TodaySelections to delete
     */
    where?: TodaySelectionWhereInput
    /**
     * Limit how many TodaySelections to delete.
     */
    limit?: number
  }

  /**
   * TodaySelection.habit
   */
  export type TodaySelection$habitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Habit
     */
    omit?: HabitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    where?: HabitWhereInput
  }

  /**
   * TodaySelection.task
   */
  export type TodaySelection$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * TodaySelection without action
   */
  export type TodaySelectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TodaySelection
     */
    select?: TodaySelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TodaySelection
     */
    omit?: TodaySelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TodaySelectionInclude<ExtArgs> | null
  }


  /**
   * Model VoiceCache
   */

  export type AggregateVoiceCache = {
    _count: VoiceCacheCountAggregateOutputType | null
    _min: VoiceCacheMinAggregateOutputType | null
    _max: VoiceCacheMaxAggregateOutputType | null
  }

  export type VoiceCacheMinAggregateOutputType = {
    id: string | null
    text: string | null
    voice: string | null
    url: string | null
    createdAt: Date | null
  }

  export type VoiceCacheMaxAggregateOutputType = {
    id: string | null
    text: string | null
    voice: string | null
    url: string | null
    createdAt: Date | null
  }

  export type VoiceCacheCountAggregateOutputType = {
    id: number
    text: number
    voice: number
    url: number
    createdAt: number
    _all: number
  }


  export type VoiceCacheMinAggregateInputType = {
    id?: true
    text?: true
    voice?: true
    url?: true
    createdAt?: true
  }

  export type VoiceCacheMaxAggregateInputType = {
    id?: true
    text?: true
    voice?: true
    url?: true
    createdAt?: true
  }

  export type VoiceCacheCountAggregateInputType = {
    id?: true
    text?: true
    voice?: true
    url?: true
    createdAt?: true
    _all?: true
  }

  export type VoiceCacheAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoiceCache to aggregate.
     */
    where?: VoiceCacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoiceCaches to fetch.
     */
    orderBy?: VoiceCacheOrderByWithRelationInput | VoiceCacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoiceCacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoiceCaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoiceCaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VoiceCaches
    **/
    _count?: true | VoiceCacheCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoiceCacheMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoiceCacheMaxAggregateInputType
  }

  export type GetVoiceCacheAggregateType<T extends VoiceCacheAggregateArgs> = {
        [P in keyof T & keyof AggregateVoiceCache]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoiceCache[P]>
      : GetScalarType<T[P], AggregateVoiceCache[P]>
  }




  export type VoiceCacheGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoiceCacheWhereInput
    orderBy?: VoiceCacheOrderByWithAggregationInput | VoiceCacheOrderByWithAggregationInput[]
    by: VoiceCacheScalarFieldEnum[] | VoiceCacheScalarFieldEnum
    having?: VoiceCacheScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoiceCacheCountAggregateInputType | true
    _min?: VoiceCacheMinAggregateInputType
    _max?: VoiceCacheMaxAggregateInputType
  }

  export type VoiceCacheGroupByOutputType = {
    id: string
    text: string
    voice: string
    url: string
    createdAt: Date
    _count: VoiceCacheCountAggregateOutputType | null
    _min: VoiceCacheMinAggregateOutputType | null
    _max: VoiceCacheMaxAggregateOutputType | null
  }

  type GetVoiceCacheGroupByPayload<T extends VoiceCacheGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoiceCacheGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoiceCacheGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoiceCacheGroupByOutputType[P]>
            : GetScalarType<T[P], VoiceCacheGroupByOutputType[P]>
        }
      >
    >


  export type VoiceCacheSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    voice?: boolean
    url?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["voiceCache"]>

  export type VoiceCacheSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    voice?: boolean
    url?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["voiceCache"]>

  export type VoiceCacheSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    voice?: boolean
    url?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["voiceCache"]>

  export type VoiceCacheSelectScalar = {
    id?: boolean
    text?: boolean
    voice?: boolean
    url?: boolean
    createdAt?: boolean
  }

  export type VoiceCacheOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "voice" | "url" | "createdAt", ExtArgs["result"]["voiceCache"]>

  export type $VoiceCachePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VoiceCache"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      voice: string
      url: string
      createdAt: Date
    }, ExtArgs["result"]["voiceCache"]>
    composites: {}
  }

  type VoiceCacheGetPayload<S extends boolean | null | undefined | VoiceCacheDefaultArgs> = $Result.GetResult<Prisma.$VoiceCachePayload, S>

  type VoiceCacheCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoiceCacheFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoiceCacheCountAggregateInputType | true
    }

  export interface VoiceCacheDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VoiceCache'], meta: { name: 'VoiceCache' } }
    /**
     * Find zero or one VoiceCache that matches the filter.
     * @param {VoiceCacheFindUniqueArgs} args - Arguments to find a VoiceCache
     * @example
     * // Get one VoiceCache
     * const voiceCache = await prisma.voiceCache.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoiceCacheFindUniqueArgs>(args: SelectSubset<T, VoiceCacheFindUniqueArgs<ExtArgs>>): Prisma__VoiceCacheClient<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VoiceCache that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoiceCacheFindUniqueOrThrowArgs} args - Arguments to find a VoiceCache
     * @example
     * // Get one VoiceCache
     * const voiceCache = await prisma.voiceCache.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoiceCacheFindUniqueOrThrowArgs>(args: SelectSubset<T, VoiceCacheFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoiceCacheClient<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VoiceCache that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceCacheFindFirstArgs} args - Arguments to find a VoiceCache
     * @example
     * // Get one VoiceCache
     * const voiceCache = await prisma.voiceCache.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoiceCacheFindFirstArgs>(args?: SelectSubset<T, VoiceCacheFindFirstArgs<ExtArgs>>): Prisma__VoiceCacheClient<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VoiceCache that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceCacheFindFirstOrThrowArgs} args - Arguments to find a VoiceCache
     * @example
     * // Get one VoiceCache
     * const voiceCache = await prisma.voiceCache.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoiceCacheFindFirstOrThrowArgs>(args?: SelectSubset<T, VoiceCacheFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoiceCacheClient<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VoiceCaches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceCacheFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VoiceCaches
     * const voiceCaches = await prisma.voiceCache.findMany()
     * 
     * // Get first 10 VoiceCaches
     * const voiceCaches = await prisma.voiceCache.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voiceCacheWithIdOnly = await prisma.voiceCache.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VoiceCacheFindManyArgs>(args?: SelectSubset<T, VoiceCacheFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VoiceCache.
     * @param {VoiceCacheCreateArgs} args - Arguments to create a VoiceCache.
     * @example
     * // Create one VoiceCache
     * const VoiceCache = await prisma.voiceCache.create({
     *   data: {
     *     // ... data to create a VoiceCache
     *   }
     * })
     * 
     */
    create<T extends VoiceCacheCreateArgs>(args: SelectSubset<T, VoiceCacheCreateArgs<ExtArgs>>): Prisma__VoiceCacheClient<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VoiceCaches.
     * @param {VoiceCacheCreateManyArgs} args - Arguments to create many VoiceCaches.
     * @example
     * // Create many VoiceCaches
     * const voiceCache = await prisma.voiceCache.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoiceCacheCreateManyArgs>(args?: SelectSubset<T, VoiceCacheCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VoiceCaches and returns the data saved in the database.
     * @param {VoiceCacheCreateManyAndReturnArgs} args - Arguments to create many VoiceCaches.
     * @example
     * // Create many VoiceCaches
     * const voiceCache = await prisma.voiceCache.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VoiceCaches and only return the `id`
     * const voiceCacheWithIdOnly = await prisma.voiceCache.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoiceCacheCreateManyAndReturnArgs>(args?: SelectSubset<T, VoiceCacheCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VoiceCache.
     * @param {VoiceCacheDeleteArgs} args - Arguments to delete one VoiceCache.
     * @example
     * // Delete one VoiceCache
     * const VoiceCache = await prisma.voiceCache.delete({
     *   where: {
     *     // ... filter to delete one VoiceCache
     *   }
     * })
     * 
     */
    delete<T extends VoiceCacheDeleteArgs>(args: SelectSubset<T, VoiceCacheDeleteArgs<ExtArgs>>): Prisma__VoiceCacheClient<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VoiceCache.
     * @param {VoiceCacheUpdateArgs} args - Arguments to update one VoiceCache.
     * @example
     * // Update one VoiceCache
     * const voiceCache = await prisma.voiceCache.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoiceCacheUpdateArgs>(args: SelectSubset<T, VoiceCacheUpdateArgs<ExtArgs>>): Prisma__VoiceCacheClient<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VoiceCaches.
     * @param {VoiceCacheDeleteManyArgs} args - Arguments to filter VoiceCaches to delete.
     * @example
     * // Delete a few VoiceCaches
     * const { count } = await prisma.voiceCache.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoiceCacheDeleteManyArgs>(args?: SelectSubset<T, VoiceCacheDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoiceCaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceCacheUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VoiceCaches
     * const voiceCache = await prisma.voiceCache.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoiceCacheUpdateManyArgs>(args: SelectSubset<T, VoiceCacheUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoiceCaches and returns the data updated in the database.
     * @param {VoiceCacheUpdateManyAndReturnArgs} args - Arguments to update many VoiceCaches.
     * @example
     * // Update many VoiceCaches
     * const voiceCache = await prisma.voiceCache.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VoiceCaches and only return the `id`
     * const voiceCacheWithIdOnly = await prisma.voiceCache.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoiceCacheUpdateManyAndReturnArgs>(args: SelectSubset<T, VoiceCacheUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VoiceCache.
     * @param {VoiceCacheUpsertArgs} args - Arguments to update or create a VoiceCache.
     * @example
     * // Update or create a VoiceCache
     * const voiceCache = await prisma.voiceCache.upsert({
     *   create: {
     *     // ... data to create a VoiceCache
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VoiceCache we want to update
     *   }
     * })
     */
    upsert<T extends VoiceCacheUpsertArgs>(args: SelectSubset<T, VoiceCacheUpsertArgs<ExtArgs>>): Prisma__VoiceCacheClient<$Result.GetResult<Prisma.$VoiceCachePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VoiceCaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceCacheCountArgs} args - Arguments to filter VoiceCaches to count.
     * @example
     * // Count the number of VoiceCaches
     * const count = await prisma.voiceCache.count({
     *   where: {
     *     // ... the filter for the VoiceCaches we want to count
     *   }
     * })
    **/
    count<T extends VoiceCacheCountArgs>(
      args?: Subset<T, VoiceCacheCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoiceCacheCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VoiceCache.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceCacheAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoiceCacheAggregateArgs>(args: Subset<T, VoiceCacheAggregateArgs>): Prisma.PrismaPromise<GetVoiceCacheAggregateType<T>>

    /**
     * Group by VoiceCache.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceCacheGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoiceCacheGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoiceCacheGroupByArgs['orderBy'] }
        : { orderBy?: VoiceCacheGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoiceCacheGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoiceCacheGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VoiceCache model
   */
  readonly fields: VoiceCacheFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VoiceCache.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoiceCacheClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VoiceCache model
   */
  interface VoiceCacheFieldRefs {
    readonly id: FieldRef<"VoiceCache", 'String'>
    readonly text: FieldRef<"VoiceCache", 'String'>
    readonly voice: FieldRef<"VoiceCache", 'String'>
    readonly url: FieldRef<"VoiceCache", 'String'>
    readonly createdAt: FieldRef<"VoiceCache", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VoiceCache findUnique
   */
  export type VoiceCacheFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * Filter, which VoiceCache to fetch.
     */
    where: VoiceCacheWhereUniqueInput
  }

  /**
   * VoiceCache findUniqueOrThrow
   */
  export type VoiceCacheFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * Filter, which VoiceCache to fetch.
     */
    where: VoiceCacheWhereUniqueInput
  }

  /**
   * VoiceCache findFirst
   */
  export type VoiceCacheFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * Filter, which VoiceCache to fetch.
     */
    where?: VoiceCacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoiceCaches to fetch.
     */
    orderBy?: VoiceCacheOrderByWithRelationInput | VoiceCacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoiceCaches.
     */
    cursor?: VoiceCacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoiceCaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoiceCaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoiceCaches.
     */
    distinct?: VoiceCacheScalarFieldEnum | VoiceCacheScalarFieldEnum[]
  }

  /**
   * VoiceCache findFirstOrThrow
   */
  export type VoiceCacheFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * Filter, which VoiceCache to fetch.
     */
    where?: VoiceCacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoiceCaches to fetch.
     */
    orderBy?: VoiceCacheOrderByWithRelationInput | VoiceCacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoiceCaches.
     */
    cursor?: VoiceCacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoiceCaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoiceCaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoiceCaches.
     */
    distinct?: VoiceCacheScalarFieldEnum | VoiceCacheScalarFieldEnum[]
  }

  /**
   * VoiceCache findMany
   */
  export type VoiceCacheFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * Filter, which VoiceCaches to fetch.
     */
    where?: VoiceCacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoiceCaches to fetch.
     */
    orderBy?: VoiceCacheOrderByWithRelationInput | VoiceCacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VoiceCaches.
     */
    cursor?: VoiceCacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoiceCaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoiceCaches.
     */
    skip?: number
    distinct?: VoiceCacheScalarFieldEnum | VoiceCacheScalarFieldEnum[]
  }

  /**
   * VoiceCache create
   */
  export type VoiceCacheCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * The data needed to create a VoiceCache.
     */
    data: XOR<VoiceCacheCreateInput, VoiceCacheUncheckedCreateInput>
  }

  /**
   * VoiceCache createMany
   */
  export type VoiceCacheCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VoiceCaches.
     */
    data: VoiceCacheCreateManyInput | VoiceCacheCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VoiceCache createManyAndReturn
   */
  export type VoiceCacheCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * The data used to create many VoiceCaches.
     */
    data: VoiceCacheCreateManyInput | VoiceCacheCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VoiceCache update
   */
  export type VoiceCacheUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * The data needed to update a VoiceCache.
     */
    data: XOR<VoiceCacheUpdateInput, VoiceCacheUncheckedUpdateInput>
    /**
     * Choose, which VoiceCache to update.
     */
    where: VoiceCacheWhereUniqueInput
  }

  /**
   * VoiceCache updateMany
   */
  export type VoiceCacheUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VoiceCaches.
     */
    data: XOR<VoiceCacheUpdateManyMutationInput, VoiceCacheUncheckedUpdateManyInput>
    /**
     * Filter which VoiceCaches to update
     */
    where?: VoiceCacheWhereInput
    /**
     * Limit how many VoiceCaches to update.
     */
    limit?: number
  }

  /**
   * VoiceCache updateManyAndReturn
   */
  export type VoiceCacheUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * The data used to update VoiceCaches.
     */
    data: XOR<VoiceCacheUpdateManyMutationInput, VoiceCacheUncheckedUpdateManyInput>
    /**
     * Filter which VoiceCaches to update
     */
    where?: VoiceCacheWhereInput
    /**
     * Limit how many VoiceCaches to update.
     */
    limit?: number
  }

  /**
   * VoiceCache upsert
   */
  export type VoiceCacheUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * The filter to search for the VoiceCache to update in case it exists.
     */
    where: VoiceCacheWhereUniqueInput
    /**
     * In case the VoiceCache found by the `where` argument doesn't exist, create a new VoiceCache with this data.
     */
    create: XOR<VoiceCacheCreateInput, VoiceCacheUncheckedCreateInput>
    /**
     * In case the VoiceCache was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoiceCacheUpdateInput, VoiceCacheUncheckedUpdateInput>
  }

  /**
   * VoiceCache delete
   */
  export type VoiceCacheDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
    /**
     * Filter which VoiceCache to delete.
     */
    where: VoiceCacheWhereUniqueInput
  }

  /**
   * VoiceCache deleteMany
   */
  export type VoiceCacheDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoiceCaches to delete
     */
    where?: VoiceCacheWhereInput
    /**
     * Limit how many VoiceCaches to delete.
     */
    limit?: number
  }

  /**
   * VoiceCache without action
   */
  export type VoiceCacheDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceCache
     */
    select?: VoiceCacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoiceCache
     */
    omit?: VoiceCacheOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    tz: 'tz',
    tone: 'tone',
    intensity: 'intensity',
    consentRoast: 'consentRoast',
    safeWord: 'safeWord',
    plan: 'plan',
    mentorId: 'mentorId',
    fcmToken: 'fcmToken',
    nudgesEnabled: 'nudgesEnabled',
    briefsEnabled: 'briefsEnabled',
    debriefsEnabled: 'debriefsEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HabitScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    schedule: 'schedule',
    streak: 'streak',
    lastTick: 'lastTick',
    color: 'color',
    context: 'context',
    reminderEnabled: 'reminderEnabled',
    reminderTime: 'reminderTime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HabitScalarFieldEnum = (typeof HabitScalarFieldEnum)[keyof typeof HabitScalarFieldEnum]


  export const AntiHabitScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    targetMins: 'targetMins',
    cleanStreak: 'cleanStreak',
    lastSlip: 'lastSlip',
    dangerWin: 'dangerWin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AntiHabitScalarFieldEnum = (typeof AntiHabitScalarFieldEnum)[keyof typeof AntiHabitScalarFieldEnum]


  export const AlarmScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    label: 'label',
    rrule: 'rrule',
    tone: 'tone',
    enabled: 'enabled',
    nextRun: 'nextRun',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlarmScalarFieldEnum = (typeof AlarmScalarFieldEnum)[keyof typeof AlarmScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    ts: 'ts',
    type: 'type',
    payload: 'payload',
    embedding: 'embedding'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const UserFactsScalarFieldEnum: {
    userId: 'userId',
    json: 'json',
    updatedAt: 'updatedAt'
  };

  export type UserFactsScalarFieldEnum = (typeof UserFactsScalarFieldEnum)[keyof typeof UserFactsScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    description: 'description',
    dueDate: 'dueDate',
    schedule: 'schedule',
    priority: 'priority',
    category: 'category',
    completed: 'completed',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const TodaySelectionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    habitId: 'habitId',
    taskId: 'taskId',
    date: 'date',
    order: 'order',
    createdAt: 'createdAt'
  };

  export type TodaySelectionScalarFieldEnum = (typeof TodaySelectionScalarFieldEnum)[keyof typeof TodaySelectionScalarFieldEnum]


  export const VoiceCacheScalarFieldEnum: {
    id: 'id',
    text: 'text',
    voice: 'voice',
    url: 'url',
    createdAt: 'createdAt'
  };

  export type VoiceCacheScalarFieldEnum = (typeof VoiceCacheScalarFieldEnum)[keyof typeof VoiceCacheScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Tone'
   */
  export type EnumToneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Tone'>
    


  /**
   * Reference to a field of type 'Tone[]'
   */
  export type ListEnumToneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Tone[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Plan'
   */
  export type EnumPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plan'>
    


  /**
   * Reference to a field of type 'Plan[]'
   */
  export type ListEnumPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plan[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    tz?: StringFilter<"User"> | string
    tone?: EnumToneFilter<"User"> | $Enums.Tone
    intensity?: IntFilter<"User"> | number
    consentRoast?: BoolFilter<"User"> | boolean
    safeWord?: StringNullableFilter<"User"> | string | null
    plan?: EnumPlanFilter<"User"> | $Enums.Plan
    mentorId?: StringNullableFilter<"User"> | string | null
    fcmToken?: StringNullableFilter<"User"> | string | null
    nudgesEnabled?: BoolFilter<"User"> | boolean
    briefsEnabled?: BoolFilter<"User"> | boolean
    debriefsEnabled?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    habits?: HabitListRelationFilter
    antiHabits?: AntiHabitListRelationFilter
    alarms?: AlarmListRelationFilter
    events?: EventListRelationFilter
    userFacts?: XOR<UserFactsNullableScalarRelationFilter, UserFactsWhereInput> | null
    tasks?: TaskListRelationFilter
    todaySelections?: TodaySelectionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    tz?: SortOrder
    tone?: SortOrder
    intensity?: SortOrder
    consentRoast?: SortOrder
    safeWord?: SortOrderInput | SortOrder
    plan?: SortOrder
    mentorId?: SortOrderInput | SortOrder
    fcmToken?: SortOrderInput | SortOrder
    nudgesEnabled?: SortOrder
    briefsEnabled?: SortOrder
    debriefsEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    habits?: HabitOrderByRelationAggregateInput
    antiHabits?: AntiHabitOrderByRelationAggregateInput
    alarms?: AlarmOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    userFacts?: UserFactsOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
    todaySelections?: TodaySelectionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    tz?: StringFilter<"User"> | string
    tone?: EnumToneFilter<"User"> | $Enums.Tone
    intensity?: IntFilter<"User"> | number
    consentRoast?: BoolFilter<"User"> | boolean
    safeWord?: StringNullableFilter<"User"> | string | null
    plan?: EnumPlanFilter<"User"> | $Enums.Plan
    mentorId?: StringNullableFilter<"User"> | string | null
    fcmToken?: StringNullableFilter<"User"> | string | null
    nudgesEnabled?: BoolFilter<"User"> | boolean
    briefsEnabled?: BoolFilter<"User"> | boolean
    debriefsEnabled?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    habits?: HabitListRelationFilter
    antiHabits?: AntiHabitListRelationFilter
    alarms?: AlarmListRelationFilter
    events?: EventListRelationFilter
    userFacts?: XOR<UserFactsNullableScalarRelationFilter, UserFactsWhereInput> | null
    tasks?: TaskListRelationFilter
    todaySelections?: TodaySelectionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    tz?: SortOrder
    tone?: SortOrder
    intensity?: SortOrder
    consentRoast?: SortOrder
    safeWord?: SortOrderInput | SortOrder
    plan?: SortOrder
    mentorId?: SortOrderInput | SortOrder
    fcmToken?: SortOrderInput | SortOrder
    nudgesEnabled?: SortOrder
    briefsEnabled?: SortOrder
    debriefsEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    tz?: StringWithAggregatesFilter<"User"> | string
    tone?: EnumToneWithAggregatesFilter<"User"> | $Enums.Tone
    intensity?: IntWithAggregatesFilter<"User"> | number
    consentRoast?: BoolWithAggregatesFilter<"User"> | boolean
    safeWord?: StringNullableWithAggregatesFilter<"User"> | string | null
    plan?: EnumPlanWithAggregatesFilter<"User"> | $Enums.Plan
    mentorId?: StringNullableWithAggregatesFilter<"User"> | string | null
    fcmToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    nudgesEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    briefsEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    debriefsEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type HabitWhereInput = {
    AND?: HabitWhereInput | HabitWhereInput[]
    OR?: HabitWhereInput[]
    NOT?: HabitWhereInput | HabitWhereInput[]
    id?: StringFilter<"Habit"> | string
    userId?: StringFilter<"Habit"> | string
    title?: StringFilter<"Habit"> | string
    schedule?: JsonFilter<"Habit">
    streak?: IntFilter<"Habit"> | number
    lastTick?: DateTimeNullableFilter<"Habit"> | Date | string | null
    color?: StringFilter<"Habit"> | string
    context?: JsonFilter<"Habit">
    reminderEnabled?: BoolFilter<"Habit"> | boolean
    reminderTime?: StringNullableFilter<"Habit"> | string | null
    createdAt?: DateTimeFilter<"Habit"> | Date | string
    updatedAt?: DateTimeFilter<"Habit"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    todaySelections?: TodaySelectionListRelationFilter
  }

  export type HabitOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    schedule?: SortOrder
    streak?: SortOrder
    lastTick?: SortOrderInput | SortOrder
    color?: SortOrder
    context?: SortOrder
    reminderEnabled?: SortOrder
    reminderTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    todaySelections?: TodaySelectionOrderByRelationAggregateInput
  }

  export type HabitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HabitWhereInput | HabitWhereInput[]
    OR?: HabitWhereInput[]
    NOT?: HabitWhereInput | HabitWhereInput[]
    userId?: StringFilter<"Habit"> | string
    title?: StringFilter<"Habit"> | string
    schedule?: JsonFilter<"Habit">
    streak?: IntFilter<"Habit"> | number
    lastTick?: DateTimeNullableFilter<"Habit"> | Date | string | null
    color?: StringFilter<"Habit"> | string
    context?: JsonFilter<"Habit">
    reminderEnabled?: BoolFilter<"Habit"> | boolean
    reminderTime?: StringNullableFilter<"Habit"> | string | null
    createdAt?: DateTimeFilter<"Habit"> | Date | string
    updatedAt?: DateTimeFilter<"Habit"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    todaySelections?: TodaySelectionListRelationFilter
  }, "id">

  export type HabitOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    schedule?: SortOrder
    streak?: SortOrder
    lastTick?: SortOrderInput | SortOrder
    color?: SortOrder
    context?: SortOrder
    reminderEnabled?: SortOrder
    reminderTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HabitCountOrderByAggregateInput
    _avg?: HabitAvgOrderByAggregateInput
    _max?: HabitMaxOrderByAggregateInput
    _min?: HabitMinOrderByAggregateInput
    _sum?: HabitSumOrderByAggregateInput
  }

  export type HabitScalarWhereWithAggregatesInput = {
    AND?: HabitScalarWhereWithAggregatesInput | HabitScalarWhereWithAggregatesInput[]
    OR?: HabitScalarWhereWithAggregatesInput[]
    NOT?: HabitScalarWhereWithAggregatesInput | HabitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Habit"> | string
    userId?: StringWithAggregatesFilter<"Habit"> | string
    title?: StringWithAggregatesFilter<"Habit"> | string
    schedule?: JsonWithAggregatesFilter<"Habit">
    streak?: IntWithAggregatesFilter<"Habit"> | number
    lastTick?: DateTimeNullableWithAggregatesFilter<"Habit"> | Date | string | null
    color?: StringWithAggregatesFilter<"Habit"> | string
    context?: JsonWithAggregatesFilter<"Habit">
    reminderEnabled?: BoolWithAggregatesFilter<"Habit"> | boolean
    reminderTime?: StringNullableWithAggregatesFilter<"Habit"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Habit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Habit"> | Date | string
  }

  export type AntiHabitWhereInput = {
    AND?: AntiHabitWhereInput | AntiHabitWhereInput[]
    OR?: AntiHabitWhereInput[]
    NOT?: AntiHabitWhereInput | AntiHabitWhereInput[]
    id?: StringFilter<"AntiHabit"> | string
    userId?: StringFilter<"AntiHabit"> | string
    name?: StringFilter<"AntiHabit"> | string
    targetMins?: IntFilter<"AntiHabit"> | number
    cleanStreak?: IntFilter<"AntiHabit"> | number
    lastSlip?: DateTimeNullableFilter<"AntiHabit"> | Date | string | null
    dangerWin?: JsonNullableFilter<"AntiHabit">
    createdAt?: DateTimeFilter<"AntiHabit"> | Date | string
    updatedAt?: DateTimeFilter<"AntiHabit"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AntiHabitOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    targetMins?: SortOrder
    cleanStreak?: SortOrder
    lastSlip?: SortOrderInput | SortOrder
    dangerWin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AntiHabitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AntiHabitWhereInput | AntiHabitWhereInput[]
    OR?: AntiHabitWhereInput[]
    NOT?: AntiHabitWhereInput | AntiHabitWhereInput[]
    userId?: StringFilter<"AntiHabit"> | string
    name?: StringFilter<"AntiHabit"> | string
    targetMins?: IntFilter<"AntiHabit"> | number
    cleanStreak?: IntFilter<"AntiHabit"> | number
    lastSlip?: DateTimeNullableFilter<"AntiHabit"> | Date | string | null
    dangerWin?: JsonNullableFilter<"AntiHabit">
    createdAt?: DateTimeFilter<"AntiHabit"> | Date | string
    updatedAt?: DateTimeFilter<"AntiHabit"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AntiHabitOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    targetMins?: SortOrder
    cleanStreak?: SortOrder
    lastSlip?: SortOrderInput | SortOrder
    dangerWin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AntiHabitCountOrderByAggregateInput
    _avg?: AntiHabitAvgOrderByAggregateInput
    _max?: AntiHabitMaxOrderByAggregateInput
    _min?: AntiHabitMinOrderByAggregateInput
    _sum?: AntiHabitSumOrderByAggregateInput
  }

  export type AntiHabitScalarWhereWithAggregatesInput = {
    AND?: AntiHabitScalarWhereWithAggregatesInput | AntiHabitScalarWhereWithAggregatesInput[]
    OR?: AntiHabitScalarWhereWithAggregatesInput[]
    NOT?: AntiHabitScalarWhereWithAggregatesInput | AntiHabitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AntiHabit"> | string
    userId?: StringWithAggregatesFilter<"AntiHabit"> | string
    name?: StringWithAggregatesFilter<"AntiHabit"> | string
    targetMins?: IntWithAggregatesFilter<"AntiHabit"> | number
    cleanStreak?: IntWithAggregatesFilter<"AntiHabit"> | number
    lastSlip?: DateTimeNullableWithAggregatesFilter<"AntiHabit"> | Date | string | null
    dangerWin?: JsonNullableWithAggregatesFilter<"AntiHabit">
    createdAt?: DateTimeWithAggregatesFilter<"AntiHabit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AntiHabit"> | Date | string
  }

  export type AlarmWhereInput = {
    AND?: AlarmWhereInput | AlarmWhereInput[]
    OR?: AlarmWhereInput[]
    NOT?: AlarmWhereInput | AlarmWhereInput[]
    id?: StringFilter<"Alarm"> | string
    userId?: StringFilter<"Alarm"> | string
    label?: StringFilter<"Alarm"> | string
    rrule?: StringFilter<"Alarm"> | string
    tone?: EnumToneFilter<"Alarm"> | $Enums.Tone
    enabled?: BoolFilter<"Alarm"> | boolean
    nextRun?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    createdAt?: DateTimeFilter<"Alarm"> | Date | string
    updatedAt?: DateTimeFilter<"Alarm"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AlarmOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    rrule?: SortOrder
    tone?: SortOrder
    enabled?: SortOrder
    nextRun?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AlarmWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlarmWhereInput | AlarmWhereInput[]
    OR?: AlarmWhereInput[]
    NOT?: AlarmWhereInput | AlarmWhereInput[]
    userId?: StringFilter<"Alarm"> | string
    label?: StringFilter<"Alarm"> | string
    rrule?: StringFilter<"Alarm"> | string
    tone?: EnumToneFilter<"Alarm"> | $Enums.Tone
    enabled?: BoolFilter<"Alarm"> | boolean
    nextRun?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    createdAt?: DateTimeFilter<"Alarm"> | Date | string
    updatedAt?: DateTimeFilter<"Alarm"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AlarmOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    rrule?: SortOrder
    tone?: SortOrder
    enabled?: SortOrder
    nextRun?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlarmCountOrderByAggregateInput
    _max?: AlarmMaxOrderByAggregateInput
    _min?: AlarmMinOrderByAggregateInput
  }

  export type AlarmScalarWhereWithAggregatesInput = {
    AND?: AlarmScalarWhereWithAggregatesInput | AlarmScalarWhereWithAggregatesInput[]
    OR?: AlarmScalarWhereWithAggregatesInput[]
    NOT?: AlarmScalarWhereWithAggregatesInput | AlarmScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Alarm"> | string
    userId?: StringWithAggregatesFilter<"Alarm"> | string
    label?: StringWithAggregatesFilter<"Alarm"> | string
    rrule?: StringWithAggregatesFilter<"Alarm"> | string
    tone?: EnumToneWithAggregatesFilter<"Alarm"> | $Enums.Tone
    enabled?: BoolWithAggregatesFilter<"Alarm"> | boolean
    nextRun?: DateTimeNullableWithAggregatesFilter<"Alarm"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Alarm"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Alarm"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    userId?: StringFilter<"Event"> | string
    ts?: DateTimeFilter<"Event"> | Date | string
    type?: StringFilter<"Event"> | string
    payload?: JsonFilter<"Event">
    embedding?: BytesNullableFilter<"Event"> | Uint8Array | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    ts?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    embedding?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    userId?: StringFilter<"Event"> | string
    ts?: DateTimeFilter<"Event"> | Date | string
    type?: StringFilter<"Event"> | string
    payload?: JsonFilter<"Event">
    embedding?: BytesNullableFilter<"Event"> | Uint8Array | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    ts?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    embedding?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    userId?: StringWithAggregatesFilter<"Event"> | string
    ts?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    type?: StringWithAggregatesFilter<"Event"> | string
    payload?: JsonWithAggregatesFilter<"Event">
    embedding?: BytesNullableWithAggregatesFilter<"Event"> | Uint8Array | null
  }

  export type UserFactsWhereInput = {
    AND?: UserFactsWhereInput | UserFactsWhereInput[]
    OR?: UserFactsWhereInput[]
    NOT?: UserFactsWhereInput | UserFactsWhereInput[]
    userId?: StringFilter<"UserFacts"> | string
    json?: JsonFilter<"UserFacts">
    updatedAt?: DateTimeFilter<"UserFacts"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserFactsOrderByWithRelationInput = {
    userId?: SortOrder
    json?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserFactsWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: UserFactsWhereInput | UserFactsWhereInput[]
    OR?: UserFactsWhereInput[]
    NOT?: UserFactsWhereInput | UserFactsWhereInput[]
    json?: JsonFilter<"UserFacts">
    updatedAt?: DateTimeFilter<"UserFacts"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId">

  export type UserFactsOrderByWithAggregationInput = {
    userId?: SortOrder
    json?: SortOrder
    updatedAt?: SortOrder
    _count?: UserFactsCountOrderByAggregateInput
    _max?: UserFactsMaxOrderByAggregateInput
    _min?: UserFactsMinOrderByAggregateInput
  }

  export type UserFactsScalarWhereWithAggregatesInput = {
    AND?: UserFactsScalarWhereWithAggregatesInput | UserFactsScalarWhereWithAggregatesInput[]
    OR?: UserFactsScalarWhereWithAggregatesInput[]
    NOT?: UserFactsScalarWhereWithAggregatesInput | UserFactsScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserFacts"> | string
    json?: JsonWithAggregatesFilter<"UserFacts">
    updatedAt?: DateTimeWithAggregatesFilter<"UserFacts"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    userId?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    schedule?: JsonFilter<"Task">
    priority?: IntFilter<"Task"> | number
    category?: StringNullableFilter<"Task"> | string | null
    completed?: BoolFilter<"Task"> | boolean
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    todaySelections?: TodaySelectionListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    schedule?: SortOrder
    priority?: SortOrder
    category?: SortOrderInput | SortOrder
    completed?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    todaySelections?: TodaySelectionOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    userId?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    schedule?: JsonFilter<"Task">
    priority?: IntFilter<"Task"> | number
    category?: StringNullableFilter<"Task"> | string | null
    completed?: BoolFilter<"Task"> | boolean
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    todaySelections?: TodaySelectionListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    schedule?: SortOrder
    priority?: SortOrder
    category?: SortOrderInput | SortOrder
    completed?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    userId?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    schedule?: JsonWithAggregatesFilter<"Task">
    priority?: IntWithAggregatesFilter<"Task"> | number
    category?: StringNullableWithAggregatesFilter<"Task"> | string | null
    completed?: BoolWithAggregatesFilter<"Task"> | boolean
    completedAt?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
  }

  export type TodaySelectionWhereInput = {
    AND?: TodaySelectionWhereInput | TodaySelectionWhereInput[]
    OR?: TodaySelectionWhereInput[]
    NOT?: TodaySelectionWhereInput | TodaySelectionWhereInput[]
    id?: StringFilter<"TodaySelection"> | string
    userId?: StringFilter<"TodaySelection"> | string
    habitId?: StringNullableFilter<"TodaySelection"> | string | null
    taskId?: StringNullableFilter<"TodaySelection"> | string | null
    date?: StringFilter<"TodaySelection"> | string
    order?: IntFilter<"TodaySelection"> | number
    createdAt?: DateTimeFilter<"TodaySelection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    habit?: XOR<HabitNullableScalarRelationFilter, HabitWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
  }

  export type TodaySelectionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    habitId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    date?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    habit?: HabitOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type TodaySelectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TodaySelectionWhereInput | TodaySelectionWhereInput[]
    OR?: TodaySelectionWhereInput[]
    NOT?: TodaySelectionWhereInput | TodaySelectionWhereInput[]
    userId?: StringFilter<"TodaySelection"> | string
    habitId?: StringNullableFilter<"TodaySelection"> | string | null
    taskId?: StringNullableFilter<"TodaySelection"> | string | null
    date?: StringFilter<"TodaySelection"> | string
    order?: IntFilter<"TodaySelection"> | number
    createdAt?: DateTimeFilter<"TodaySelection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    habit?: XOR<HabitNullableScalarRelationFilter, HabitWhereInput> | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
  }, "id">

  export type TodaySelectionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    habitId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    date?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    _count?: TodaySelectionCountOrderByAggregateInput
    _avg?: TodaySelectionAvgOrderByAggregateInput
    _max?: TodaySelectionMaxOrderByAggregateInput
    _min?: TodaySelectionMinOrderByAggregateInput
    _sum?: TodaySelectionSumOrderByAggregateInput
  }

  export type TodaySelectionScalarWhereWithAggregatesInput = {
    AND?: TodaySelectionScalarWhereWithAggregatesInput | TodaySelectionScalarWhereWithAggregatesInput[]
    OR?: TodaySelectionScalarWhereWithAggregatesInput[]
    NOT?: TodaySelectionScalarWhereWithAggregatesInput | TodaySelectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TodaySelection"> | string
    userId?: StringWithAggregatesFilter<"TodaySelection"> | string
    habitId?: StringNullableWithAggregatesFilter<"TodaySelection"> | string | null
    taskId?: StringNullableWithAggregatesFilter<"TodaySelection"> | string | null
    date?: StringWithAggregatesFilter<"TodaySelection"> | string
    order?: IntWithAggregatesFilter<"TodaySelection"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TodaySelection"> | Date | string
  }

  export type VoiceCacheWhereInput = {
    AND?: VoiceCacheWhereInput | VoiceCacheWhereInput[]
    OR?: VoiceCacheWhereInput[]
    NOT?: VoiceCacheWhereInput | VoiceCacheWhereInput[]
    id?: StringFilter<"VoiceCache"> | string
    text?: StringFilter<"VoiceCache"> | string
    voice?: StringFilter<"VoiceCache"> | string
    url?: StringFilter<"VoiceCache"> | string
    createdAt?: DateTimeFilter<"VoiceCache"> | Date | string
  }

  export type VoiceCacheOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    voice?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
  }

  export type VoiceCacheWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VoiceCacheWhereInput | VoiceCacheWhereInput[]
    OR?: VoiceCacheWhereInput[]
    NOT?: VoiceCacheWhereInput | VoiceCacheWhereInput[]
    text?: StringFilter<"VoiceCache"> | string
    voice?: StringFilter<"VoiceCache"> | string
    url?: StringFilter<"VoiceCache"> | string
    createdAt?: DateTimeFilter<"VoiceCache"> | Date | string
  }, "id">

  export type VoiceCacheOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    voice?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    _count?: VoiceCacheCountOrderByAggregateInput
    _max?: VoiceCacheMaxOrderByAggregateInput
    _min?: VoiceCacheMinOrderByAggregateInput
  }

  export type VoiceCacheScalarWhereWithAggregatesInput = {
    AND?: VoiceCacheScalarWhereWithAggregatesInput | VoiceCacheScalarWhereWithAggregatesInput[]
    OR?: VoiceCacheScalarWhereWithAggregatesInput[]
    NOT?: VoiceCacheScalarWhereWithAggregatesInput | VoiceCacheScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VoiceCache"> | string
    text?: StringWithAggregatesFilter<"VoiceCache"> | string
    voice?: StringWithAggregatesFilter<"VoiceCache"> | string
    url?: StringWithAggregatesFilter<"VoiceCache"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VoiceCache"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitCreateNestedManyWithoutUserInput
    alarms?: AlarmCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    userFacts?: UserFactsCreateNestedOneWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitUncheckedCreateNestedManyWithoutUserInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    userFacts?: UserFactsUncheckedCreateNestedOneWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUpdateManyWithoutUserNestedInput
    alarms?: AlarmUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUpdateOneWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUncheckedUpdateManyWithoutUserNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUncheckedUpdateOneWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitCreateInput = {
    id?: string
    title: string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: number
    lastTick?: Date | string | null
    color?: string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: boolean
    reminderTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHabitsInput
    todaySelections?: TodaySelectionCreateNestedManyWithoutHabitInput
  }

  export type HabitUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: number
    lastTick?: Date | string | null
    color?: string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: boolean
    reminderTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutHabitInput
  }

  export type HabitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: IntFieldUpdateOperationsInput | number
    lastTick?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    color?: StringFieldUpdateOperationsInput | string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: BoolFieldUpdateOperationsInput | boolean
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHabitsNestedInput
    todaySelections?: TodaySelectionUpdateManyWithoutHabitNestedInput
  }

  export type HabitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: IntFieldUpdateOperationsInput | number
    lastTick?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    color?: StringFieldUpdateOperationsInput | string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: BoolFieldUpdateOperationsInput | boolean
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutHabitNestedInput
  }

  export type HabitCreateManyInput = {
    id?: string
    userId: string
    title: string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: number
    lastTick?: Date | string | null
    color?: string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: boolean
    reminderTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: IntFieldUpdateOperationsInput | number
    lastTick?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    color?: StringFieldUpdateOperationsInput | string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: BoolFieldUpdateOperationsInput | boolean
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: IntFieldUpdateOperationsInput | number
    lastTick?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    color?: StringFieldUpdateOperationsInput | string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: BoolFieldUpdateOperationsInput | boolean
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntiHabitCreateInput = {
    id?: string
    name: string
    targetMins?: number
    cleanStreak?: number
    lastSlip?: Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAntiHabitsInput
  }

  export type AntiHabitUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    targetMins?: number
    cleanStreak?: number
    lastSlip?: Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntiHabitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    targetMins?: IntFieldUpdateOperationsInput | number
    cleanStreak?: IntFieldUpdateOperationsInput | number
    lastSlip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAntiHabitsNestedInput
  }

  export type AntiHabitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    targetMins?: IntFieldUpdateOperationsInput | number
    cleanStreak?: IntFieldUpdateOperationsInput | number
    lastSlip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntiHabitCreateManyInput = {
    id?: string
    userId: string
    name: string
    targetMins?: number
    cleanStreak?: number
    lastSlip?: Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntiHabitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    targetMins?: IntFieldUpdateOperationsInput | number
    cleanStreak?: IntFieldUpdateOperationsInput | number
    lastSlip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntiHabitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    targetMins?: IntFieldUpdateOperationsInput | number
    cleanStreak?: IntFieldUpdateOperationsInput | number
    lastSlip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmCreateInput = {
    id?: string
    label: string
    rrule: string
    tone?: $Enums.Tone
    enabled?: boolean
    nextRun?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAlarmsInput
  }

  export type AlarmUncheckedCreateInput = {
    id?: string
    userId: string
    label: string
    rrule: string
    tone?: $Enums.Tone
    enabled?: boolean
    nextRun?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlarmUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    rrule?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    enabled?: BoolFieldUpdateOperationsInput | boolean
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAlarmsNestedInput
  }

  export type AlarmUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    rrule?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    enabled?: BoolFieldUpdateOperationsInput | boolean
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmCreateManyInput = {
    id?: string
    userId: string
    label: string
    rrule: string
    tone?: $Enums.Tone
    enabled?: boolean
    nextRun?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlarmUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    rrule?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    enabled?: BoolFieldUpdateOperationsInput | boolean
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    rrule?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    enabled?: BoolFieldUpdateOperationsInput | boolean
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id?: string
    ts?: Date | string
    type: string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: Uint8Array | null
    user: UserCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    userId: string
    ts?: Date | string
    type: string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: Uint8Array | null
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type EventCreateManyInput = {
    id?: string
    userId: string
    ts?: Date | string
    type: string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: Uint8Array | null
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type UserFactsCreateInput = {
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserFactsInput
  }

  export type UserFactsUncheckedCreateInput = {
    userId: string
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type UserFactsUpdateInput = {
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserFactsNestedInput
  }

  export type UserFactsUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFactsCreateManyInput = {
    userId: string
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type UserFactsUpdateManyMutationInput = {
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFactsUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: number
    category?: string | null
    completed?: boolean
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTasksInput
    todaySelections?: TodaySelectionCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: number
    category?: string | null
    completed?: boolean
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTasksNestedInput
    todaySelections?: TodaySelectionUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: number
    category?: string | null
    completed?: boolean
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodaySelectionCreateInput = {
    id?: string
    date: string
    order?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTodaySelectionsInput
    habit?: HabitCreateNestedOneWithoutTodaySelectionsInput
    task?: TaskCreateNestedOneWithoutTodaySelectionsInput
  }

  export type TodaySelectionUncheckedCreateInput = {
    id?: string
    userId: string
    habitId?: string | null
    taskId?: string | null
    date: string
    order?: number
    createdAt?: Date | string
  }

  export type TodaySelectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTodaySelectionsNestedInput
    habit?: HabitUpdateOneWithoutTodaySelectionsNestedInput
    task?: TaskUpdateOneWithoutTodaySelectionsNestedInput
  }

  export type TodaySelectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    habitId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodaySelectionCreateManyInput = {
    id?: string
    userId: string
    habitId?: string | null
    taskId?: string | null
    date: string
    order?: number
    createdAt?: Date | string
  }

  export type TodaySelectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodaySelectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    habitId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoiceCacheCreateInput = {
    id: string
    text: string
    voice: string
    url: string
    createdAt?: Date | string
  }

  export type VoiceCacheUncheckedCreateInput = {
    id: string
    text: string
    voice: string
    url: string
    createdAt?: Date | string
  }

  export type VoiceCacheUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    voice?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoiceCacheUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    voice?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoiceCacheCreateManyInput = {
    id: string
    text: string
    voice: string
    url: string
    createdAt?: Date | string
  }

  export type VoiceCacheUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    voice?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoiceCacheUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    voice?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumToneFilter<$PrismaModel = never> = {
    equals?: $Enums.Tone | EnumToneFieldRefInput<$PrismaModel>
    in?: $Enums.Tone[] | ListEnumToneFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tone[] | ListEnumToneFieldRefInput<$PrismaModel>
    not?: NestedEnumToneFilter<$PrismaModel> | $Enums.Tone
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanFilter<$PrismaModel> | $Enums.Plan
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type HabitListRelationFilter = {
    every?: HabitWhereInput
    some?: HabitWhereInput
    none?: HabitWhereInput
  }

  export type AntiHabitListRelationFilter = {
    every?: AntiHabitWhereInput
    some?: AntiHabitWhereInput
    none?: AntiHabitWhereInput
  }

  export type AlarmListRelationFilter = {
    every?: AlarmWhereInput
    some?: AlarmWhereInput
    none?: AlarmWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type UserFactsNullableScalarRelationFilter = {
    is?: UserFactsWhereInput | null
    isNot?: UserFactsWhereInput | null
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type TodaySelectionListRelationFilter = {
    every?: TodaySelectionWhereInput
    some?: TodaySelectionWhereInput
    none?: TodaySelectionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HabitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AntiHabitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlarmOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TodaySelectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    tz?: SortOrder
    tone?: SortOrder
    intensity?: SortOrder
    consentRoast?: SortOrder
    safeWord?: SortOrder
    plan?: SortOrder
    mentorId?: SortOrder
    fcmToken?: SortOrder
    nudgesEnabled?: SortOrder
    briefsEnabled?: SortOrder
    debriefsEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    intensity?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    tz?: SortOrder
    tone?: SortOrder
    intensity?: SortOrder
    consentRoast?: SortOrder
    safeWord?: SortOrder
    plan?: SortOrder
    mentorId?: SortOrder
    fcmToken?: SortOrder
    nudgesEnabled?: SortOrder
    briefsEnabled?: SortOrder
    debriefsEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    tz?: SortOrder
    tone?: SortOrder
    intensity?: SortOrder
    consentRoast?: SortOrder
    safeWord?: SortOrder
    plan?: SortOrder
    mentorId?: SortOrder
    fcmToken?: SortOrder
    nudgesEnabled?: SortOrder
    briefsEnabled?: SortOrder
    debriefsEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    intensity?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumToneWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Tone | EnumToneFieldRefInput<$PrismaModel>
    in?: $Enums.Tone[] | ListEnumToneFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tone[] | ListEnumToneFieldRefInput<$PrismaModel>
    not?: NestedEnumToneWithAggregatesFilter<$PrismaModel> | $Enums.Tone
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumToneFilter<$PrismaModel>
    _max?: NestedEnumToneFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanWithAggregatesFilter<$PrismaModel> | $Enums.Plan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanFilter<$PrismaModel>
    _max?: NestedEnumPlanFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HabitCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    schedule?: SortOrder
    streak?: SortOrder
    lastTick?: SortOrder
    color?: SortOrder
    context?: SortOrder
    reminderEnabled?: SortOrder
    reminderTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitAvgOrderByAggregateInput = {
    streak?: SortOrder
  }

  export type HabitMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    streak?: SortOrder
    lastTick?: SortOrder
    color?: SortOrder
    reminderEnabled?: SortOrder
    reminderTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    streak?: SortOrder
    lastTick?: SortOrder
    color?: SortOrder
    reminderEnabled?: SortOrder
    reminderTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitSumOrderByAggregateInput = {
    streak?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AntiHabitCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    targetMins?: SortOrder
    cleanStreak?: SortOrder
    lastSlip?: SortOrder
    dangerWin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AntiHabitAvgOrderByAggregateInput = {
    targetMins?: SortOrder
    cleanStreak?: SortOrder
  }

  export type AntiHabitMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    targetMins?: SortOrder
    cleanStreak?: SortOrder
    lastSlip?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AntiHabitMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    targetMins?: SortOrder
    cleanStreak?: SortOrder
    lastSlip?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AntiHabitSumOrderByAggregateInput = {
    targetMins?: SortOrder
    cleanStreak?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type AlarmCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    rrule?: SortOrder
    tone?: SortOrder
    enabled?: SortOrder
    nextRun?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlarmMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    rrule?: SortOrder
    tone?: SortOrder
    enabled?: SortOrder
    nextRun?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlarmMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    rrule?: SortOrder
    tone?: SortOrder
    enabled?: SortOrder
    nextRun?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ts?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    embedding?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ts?: SortOrder
    type?: SortOrder
    embedding?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ts?: SortOrder
    type?: SortOrder
    embedding?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type UserFactsCountOrderByAggregateInput = {
    userId?: SortOrder
    json?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserFactsMaxOrderByAggregateInput = {
    userId?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserFactsMinOrderByAggregateInput = {
    userId?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    schedule?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    completed?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type HabitNullableScalarRelationFilter = {
    is?: HabitWhereInput | null
    isNot?: HabitWhereInput | null
  }

  export type TaskNullableScalarRelationFilter = {
    is?: TaskWhereInput | null
    isNot?: TaskWhereInput | null
  }

  export type TodaySelectionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    habitId?: SortOrder
    taskId?: SortOrder
    date?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type TodaySelectionAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type TodaySelectionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    habitId?: SortOrder
    taskId?: SortOrder
    date?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type TodaySelectionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    habitId?: SortOrder
    taskId?: SortOrder
    date?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type TodaySelectionSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type VoiceCacheCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    voice?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
  }

  export type VoiceCacheMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    voice?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
  }

  export type VoiceCacheMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    voice?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
  }

  export type HabitCreateNestedManyWithoutUserInput = {
    create?: XOR<HabitCreateWithoutUserInput, HabitUncheckedCreateWithoutUserInput> | HabitCreateWithoutUserInput[] | HabitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutUserInput | HabitCreateOrConnectWithoutUserInput[]
    createMany?: HabitCreateManyUserInputEnvelope
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
  }

  export type AntiHabitCreateNestedManyWithoutUserInput = {
    create?: XOR<AntiHabitCreateWithoutUserInput, AntiHabitUncheckedCreateWithoutUserInput> | AntiHabitCreateWithoutUserInput[] | AntiHabitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AntiHabitCreateOrConnectWithoutUserInput | AntiHabitCreateOrConnectWithoutUserInput[]
    createMany?: AntiHabitCreateManyUserInputEnvelope
    connect?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
  }

  export type AlarmCreateNestedManyWithoutUserInput = {
    create?: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput> | AlarmCreateWithoutUserInput[] | AlarmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutUserInput | AlarmCreateOrConnectWithoutUserInput[]
    createMany?: AlarmCreateManyUserInputEnvelope
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutUserInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type UserFactsCreateNestedOneWithoutUserInput = {
    create?: XOR<UserFactsCreateWithoutUserInput, UserFactsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserFactsCreateOrConnectWithoutUserInput
    connect?: UserFactsWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput> | TaskCreateWithoutUserInput[] | TaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUserInput | TaskCreateOrConnectWithoutUserInput[]
    createMany?: TaskCreateManyUserInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TodaySelectionCreateNestedManyWithoutUserInput = {
    create?: XOR<TodaySelectionCreateWithoutUserInput, TodaySelectionUncheckedCreateWithoutUserInput> | TodaySelectionCreateWithoutUserInput[] | TodaySelectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutUserInput | TodaySelectionCreateOrConnectWithoutUserInput[]
    createMany?: TodaySelectionCreateManyUserInputEnvelope
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
  }

  export type HabitUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HabitCreateWithoutUserInput, HabitUncheckedCreateWithoutUserInput> | HabitCreateWithoutUserInput[] | HabitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutUserInput | HabitCreateOrConnectWithoutUserInput[]
    createMany?: HabitCreateManyUserInputEnvelope
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
  }

  export type AntiHabitUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AntiHabitCreateWithoutUserInput, AntiHabitUncheckedCreateWithoutUserInput> | AntiHabitCreateWithoutUserInput[] | AntiHabitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AntiHabitCreateOrConnectWithoutUserInput | AntiHabitCreateOrConnectWithoutUserInput[]
    createMany?: AntiHabitCreateManyUserInputEnvelope
    connect?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
  }

  export type AlarmUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput> | AlarmCreateWithoutUserInput[] | AlarmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutUserInput | AlarmCreateOrConnectWithoutUserInput[]
    createMany?: AlarmCreateManyUserInputEnvelope
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type UserFactsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserFactsCreateWithoutUserInput, UserFactsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserFactsCreateOrConnectWithoutUserInput
    connect?: UserFactsWhereUniqueInput
  }

  export type TaskUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput> | TaskCreateWithoutUserInput[] | TaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUserInput | TaskCreateOrConnectWithoutUserInput[]
    createMany?: TaskCreateManyUserInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TodaySelectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TodaySelectionCreateWithoutUserInput, TodaySelectionUncheckedCreateWithoutUserInput> | TodaySelectionCreateWithoutUserInput[] | TodaySelectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutUserInput | TodaySelectionCreateOrConnectWithoutUserInput[]
    createMany?: TodaySelectionCreateManyUserInputEnvelope
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumToneFieldUpdateOperationsInput = {
    set?: $Enums.Tone
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumPlanFieldUpdateOperationsInput = {
    set?: $Enums.Plan
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type HabitUpdateManyWithoutUserNestedInput = {
    create?: XOR<HabitCreateWithoutUserInput, HabitUncheckedCreateWithoutUserInput> | HabitCreateWithoutUserInput[] | HabitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutUserInput | HabitCreateOrConnectWithoutUserInput[]
    upsert?: HabitUpsertWithWhereUniqueWithoutUserInput | HabitUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HabitCreateManyUserInputEnvelope
    set?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    disconnect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    delete?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    update?: HabitUpdateWithWhereUniqueWithoutUserInput | HabitUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HabitUpdateManyWithWhereWithoutUserInput | HabitUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HabitScalarWhereInput | HabitScalarWhereInput[]
  }

  export type AntiHabitUpdateManyWithoutUserNestedInput = {
    create?: XOR<AntiHabitCreateWithoutUserInput, AntiHabitUncheckedCreateWithoutUserInput> | AntiHabitCreateWithoutUserInput[] | AntiHabitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AntiHabitCreateOrConnectWithoutUserInput | AntiHabitCreateOrConnectWithoutUserInput[]
    upsert?: AntiHabitUpsertWithWhereUniqueWithoutUserInput | AntiHabitUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AntiHabitCreateManyUserInputEnvelope
    set?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
    disconnect?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
    delete?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
    connect?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
    update?: AntiHabitUpdateWithWhereUniqueWithoutUserInput | AntiHabitUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AntiHabitUpdateManyWithWhereWithoutUserInput | AntiHabitUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AntiHabitScalarWhereInput | AntiHabitScalarWhereInput[]
  }

  export type AlarmUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput> | AlarmCreateWithoutUserInput[] | AlarmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutUserInput | AlarmCreateOrConnectWithoutUserInput[]
    upsert?: AlarmUpsertWithWhereUniqueWithoutUserInput | AlarmUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlarmCreateManyUserInputEnvelope
    set?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    disconnect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    delete?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    update?: AlarmUpdateWithWhereUniqueWithoutUserInput | AlarmUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlarmUpdateManyWithWhereWithoutUserInput | AlarmUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
  }

  export type EventUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutUserInput | EventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutUserInput | EventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventUpdateManyWithWhereWithoutUserInput | EventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type UserFactsUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserFactsCreateWithoutUserInput, UserFactsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserFactsCreateOrConnectWithoutUserInput
    upsert?: UserFactsUpsertWithoutUserInput
    disconnect?: UserFactsWhereInput | boolean
    delete?: UserFactsWhereInput | boolean
    connect?: UserFactsWhereUniqueInput
    update?: XOR<XOR<UserFactsUpdateToOneWithWhereWithoutUserInput, UserFactsUpdateWithoutUserInput>, UserFactsUncheckedUpdateWithoutUserInput>
  }

  export type TaskUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput> | TaskCreateWithoutUserInput[] | TaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUserInput | TaskCreateOrConnectWithoutUserInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutUserInput | TaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskCreateManyUserInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutUserInput | TaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutUserInput | TaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TodaySelectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TodaySelectionCreateWithoutUserInput, TodaySelectionUncheckedCreateWithoutUserInput> | TodaySelectionCreateWithoutUserInput[] | TodaySelectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutUserInput | TodaySelectionCreateOrConnectWithoutUserInput[]
    upsert?: TodaySelectionUpsertWithWhereUniqueWithoutUserInput | TodaySelectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TodaySelectionCreateManyUserInputEnvelope
    set?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    disconnect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    delete?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    update?: TodaySelectionUpdateWithWhereUniqueWithoutUserInput | TodaySelectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TodaySelectionUpdateManyWithWhereWithoutUserInput | TodaySelectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TodaySelectionScalarWhereInput | TodaySelectionScalarWhereInput[]
  }

  export type HabitUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HabitCreateWithoutUserInput, HabitUncheckedCreateWithoutUserInput> | HabitCreateWithoutUserInput[] | HabitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutUserInput | HabitCreateOrConnectWithoutUserInput[]
    upsert?: HabitUpsertWithWhereUniqueWithoutUserInput | HabitUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HabitCreateManyUserInputEnvelope
    set?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    disconnect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    delete?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    update?: HabitUpdateWithWhereUniqueWithoutUserInput | HabitUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HabitUpdateManyWithWhereWithoutUserInput | HabitUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HabitScalarWhereInput | HabitScalarWhereInput[]
  }

  export type AntiHabitUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AntiHabitCreateWithoutUserInput, AntiHabitUncheckedCreateWithoutUserInput> | AntiHabitCreateWithoutUserInput[] | AntiHabitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AntiHabitCreateOrConnectWithoutUserInput | AntiHabitCreateOrConnectWithoutUserInput[]
    upsert?: AntiHabitUpsertWithWhereUniqueWithoutUserInput | AntiHabitUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AntiHabitCreateManyUserInputEnvelope
    set?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
    disconnect?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
    delete?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
    connect?: AntiHabitWhereUniqueInput | AntiHabitWhereUniqueInput[]
    update?: AntiHabitUpdateWithWhereUniqueWithoutUserInput | AntiHabitUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AntiHabitUpdateManyWithWhereWithoutUserInput | AntiHabitUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AntiHabitScalarWhereInput | AntiHabitScalarWhereInput[]
  }

  export type AlarmUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput> | AlarmCreateWithoutUserInput[] | AlarmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlarmCreateOrConnectWithoutUserInput | AlarmCreateOrConnectWithoutUserInput[]
    upsert?: AlarmUpsertWithWhereUniqueWithoutUserInput | AlarmUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlarmCreateManyUserInputEnvelope
    set?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    disconnect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    delete?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    connect?: AlarmWhereUniqueInput | AlarmWhereUniqueInput[]
    update?: AlarmUpdateWithWhereUniqueWithoutUserInput | AlarmUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlarmUpdateManyWithWhereWithoutUserInput | AlarmUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutUserInput | EventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutUserInput | EventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventUpdateManyWithWhereWithoutUserInput | EventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type UserFactsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserFactsCreateWithoutUserInput, UserFactsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserFactsCreateOrConnectWithoutUserInput
    upsert?: UserFactsUpsertWithoutUserInput
    disconnect?: UserFactsWhereInput | boolean
    delete?: UserFactsWhereInput | boolean
    connect?: UserFactsWhereUniqueInput
    update?: XOR<XOR<UserFactsUpdateToOneWithWhereWithoutUserInput, UserFactsUpdateWithoutUserInput>, UserFactsUncheckedUpdateWithoutUserInput>
  }

  export type TaskUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput> | TaskCreateWithoutUserInput[] | TaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUserInput | TaskCreateOrConnectWithoutUserInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutUserInput | TaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskCreateManyUserInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutUserInput | TaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutUserInput | TaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TodaySelectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TodaySelectionCreateWithoutUserInput, TodaySelectionUncheckedCreateWithoutUserInput> | TodaySelectionCreateWithoutUserInput[] | TodaySelectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutUserInput | TodaySelectionCreateOrConnectWithoutUserInput[]
    upsert?: TodaySelectionUpsertWithWhereUniqueWithoutUserInput | TodaySelectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TodaySelectionCreateManyUserInputEnvelope
    set?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    disconnect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    delete?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    update?: TodaySelectionUpdateWithWhereUniqueWithoutUserInput | TodaySelectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TodaySelectionUpdateManyWithWhereWithoutUserInput | TodaySelectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TodaySelectionScalarWhereInput | TodaySelectionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutHabitsInput = {
    create?: XOR<UserCreateWithoutHabitsInput, UserUncheckedCreateWithoutHabitsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHabitsInput
    connect?: UserWhereUniqueInput
  }

  export type TodaySelectionCreateNestedManyWithoutHabitInput = {
    create?: XOR<TodaySelectionCreateWithoutHabitInput, TodaySelectionUncheckedCreateWithoutHabitInput> | TodaySelectionCreateWithoutHabitInput[] | TodaySelectionUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutHabitInput | TodaySelectionCreateOrConnectWithoutHabitInput[]
    createMany?: TodaySelectionCreateManyHabitInputEnvelope
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
  }

  export type TodaySelectionUncheckedCreateNestedManyWithoutHabitInput = {
    create?: XOR<TodaySelectionCreateWithoutHabitInput, TodaySelectionUncheckedCreateWithoutHabitInput> | TodaySelectionCreateWithoutHabitInput[] | TodaySelectionUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutHabitInput | TodaySelectionCreateOrConnectWithoutHabitInput[]
    createMany?: TodaySelectionCreateManyHabitInputEnvelope
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutHabitsNestedInput = {
    create?: XOR<UserCreateWithoutHabitsInput, UserUncheckedCreateWithoutHabitsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHabitsInput
    upsert?: UserUpsertWithoutHabitsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHabitsInput, UserUpdateWithoutHabitsInput>, UserUncheckedUpdateWithoutHabitsInput>
  }

  export type TodaySelectionUpdateManyWithoutHabitNestedInput = {
    create?: XOR<TodaySelectionCreateWithoutHabitInput, TodaySelectionUncheckedCreateWithoutHabitInput> | TodaySelectionCreateWithoutHabitInput[] | TodaySelectionUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutHabitInput | TodaySelectionCreateOrConnectWithoutHabitInput[]
    upsert?: TodaySelectionUpsertWithWhereUniqueWithoutHabitInput | TodaySelectionUpsertWithWhereUniqueWithoutHabitInput[]
    createMany?: TodaySelectionCreateManyHabitInputEnvelope
    set?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    disconnect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    delete?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    update?: TodaySelectionUpdateWithWhereUniqueWithoutHabitInput | TodaySelectionUpdateWithWhereUniqueWithoutHabitInput[]
    updateMany?: TodaySelectionUpdateManyWithWhereWithoutHabitInput | TodaySelectionUpdateManyWithWhereWithoutHabitInput[]
    deleteMany?: TodaySelectionScalarWhereInput | TodaySelectionScalarWhereInput[]
  }

  export type TodaySelectionUncheckedUpdateManyWithoutHabitNestedInput = {
    create?: XOR<TodaySelectionCreateWithoutHabitInput, TodaySelectionUncheckedCreateWithoutHabitInput> | TodaySelectionCreateWithoutHabitInput[] | TodaySelectionUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutHabitInput | TodaySelectionCreateOrConnectWithoutHabitInput[]
    upsert?: TodaySelectionUpsertWithWhereUniqueWithoutHabitInput | TodaySelectionUpsertWithWhereUniqueWithoutHabitInput[]
    createMany?: TodaySelectionCreateManyHabitInputEnvelope
    set?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    disconnect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    delete?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    update?: TodaySelectionUpdateWithWhereUniqueWithoutHabitInput | TodaySelectionUpdateWithWhereUniqueWithoutHabitInput[]
    updateMany?: TodaySelectionUpdateManyWithWhereWithoutHabitInput | TodaySelectionUpdateManyWithWhereWithoutHabitInput[]
    deleteMany?: TodaySelectionScalarWhereInput | TodaySelectionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAntiHabitsInput = {
    create?: XOR<UserCreateWithoutAntiHabitsInput, UserUncheckedCreateWithoutAntiHabitsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAntiHabitsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAntiHabitsNestedInput = {
    create?: XOR<UserCreateWithoutAntiHabitsInput, UserUncheckedCreateWithoutAntiHabitsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAntiHabitsInput
    upsert?: UserUpsertWithoutAntiHabitsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAntiHabitsInput, UserUpdateWithoutAntiHabitsInput>, UserUncheckedUpdateWithoutAntiHabitsInput>
  }

  export type UserCreateNestedOneWithoutAlarmsInput = {
    create?: XOR<UserCreateWithoutAlarmsInput, UserUncheckedCreateWithoutAlarmsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlarmsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAlarmsNestedInput = {
    create?: XOR<UserCreateWithoutAlarmsInput, UserUncheckedCreateWithoutAlarmsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlarmsInput
    upsert?: UserUpsertWithoutAlarmsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAlarmsInput, UserUpdateWithoutAlarmsInput>, UserUncheckedUpdateWithoutAlarmsInput>
  }

  export type UserCreateNestedOneWithoutEventsInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type UserUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    upsert?: UserUpsertWithoutEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventsInput, UserUpdateWithoutEventsInput>, UserUncheckedUpdateWithoutEventsInput>
  }

  export type UserCreateNestedOneWithoutUserFactsInput = {
    create?: XOR<UserCreateWithoutUserFactsInput, UserUncheckedCreateWithoutUserFactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFactsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserFactsNestedInput = {
    create?: XOR<UserCreateWithoutUserFactsInput, UserUncheckedCreateWithoutUserFactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFactsInput
    upsert?: UserUpsertWithoutUserFactsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserFactsInput, UserUpdateWithoutUserFactsInput>, UserUncheckedUpdateWithoutUserFactsInput>
  }

  export type UserCreateNestedOneWithoutTasksInput = {
    create?: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutTasksInput
    connect?: UserWhereUniqueInput
  }

  export type TodaySelectionCreateNestedManyWithoutTaskInput = {
    create?: XOR<TodaySelectionCreateWithoutTaskInput, TodaySelectionUncheckedCreateWithoutTaskInput> | TodaySelectionCreateWithoutTaskInput[] | TodaySelectionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutTaskInput | TodaySelectionCreateOrConnectWithoutTaskInput[]
    createMany?: TodaySelectionCreateManyTaskInputEnvelope
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
  }

  export type TodaySelectionUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<TodaySelectionCreateWithoutTaskInput, TodaySelectionUncheckedCreateWithoutTaskInput> | TodaySelectionCreateWithoutTaskInput[] | TodaySelectionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutTaskInput | TodaySelectionCreateOrConnectWithoutTaskInput[]
    createMany?: TodaySelectionCreateManyTaskInputEnvelope
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutTasksInput
    upsert?: UserUpsertWithoutTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTasksInput, UserUpdateWithoutTasksInput>, UserUncheckedUpdateWithoutTasksInput>
  }

  export type TodaySelectionUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TodaySelectionCreateWithoutTaskInput, TodaySelectionUncheckedCreateWithoutTaskInput> | TodaySelectionCreateWithoutTaskInput[] | TodaySelectionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutTaskInput | TodaySelectionCreateOrConnectWithoutTaskInput[]
    upsert?: TodaySelectionUpsertWithWhereUniqueWithoutTaskInput | TodaySelectionUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TodaySelectionCreateManyTaskInputEnvelope
    set?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    disconnect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    delete?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    update?: TodaySelectionUpdateWithWhereUniqueWithoutTaskInput | TodaySelectionUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TodaySelectionUpdateManyWithWhereWithoutTaskInput | TodaySelectionUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TodaySelectionScalarWhereInput | TodaySelectionScalarWhereInput[]
  }

  export type TodaySelectionUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TodaySelectionCreateWithoutTaskInput, TodaySelectionUncheckedCreateWithoutTaskInput> | TodaySelectionCreateWithoutTaskInput[] | TodaySelectionUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TodaySelectionCreateOrConnectWithoutTaskInput | TodaySelectionCreateOrConnectWithoutTaskInput[]
    upsert?: TodaySelectionUpsertWithWhereUniqueWithoutTaskInput | TodaySelectionUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TodaySelectionCreateManyTaskInputEnvelope
    set?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    disconnect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    delete?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    connect?: TodaySelectionWhereUniqueInput | TodaySelectionWhereUniqueInput[]
    update?: TodaySelectionUpdateWithWhereUniqueWithoutTaskInput | TodaySelectionUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TodaySelectionUpdateManyWithWhereWithoutTaskInput | TodaySelectionUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TodaySelectionScalarWhereInput | TodaySelectionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTodaySelectionsInput = {
    create?: XOR<UserCreateWithoutTodaySelectionsInput, UserUncheckedCreateWithoutTodaySelectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTodaySelectionsInput
    connect?: UserWhereUniqueInput
  }

  export type HabitCreateNestedOneWithoutTodaySelectionsInput = {
    create?: XOR<HabitCreateWithoutTodaySelectionsInput, HabitUncheckedCreateWithoutTodaySelectionsInput>
    connectOrCreate?: HabitCreateOrConnectWithoutTodaySelectionsInput
    connect?: HabitWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutTodaySelectionsInput = {
    create?: XOR<TaskCreateWithoutTodaySelectionsInput, TaskUncheckedCreateWithoutTodaySelectionsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutTodaySelectionsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTodaySelectionsNestedInput = {
    create?: XOR<UserCreateWithoutTodaySelectionsInput, UserUncheckedCreateWithoutTodaySelectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTodaySelectionsInput
    upsert?: UserUpsertWithoutTodaySelectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTodaySelectionsInput, UserUpdateWithoutTodaySelectionsInput>, UserUncheckedUpdateWithoutTodaySelectionsInput>
  }

  export type HabitUpdateOneWithoutTodaySelectionsNestedInput = {
    create?: XOR<HabitCreateWithoutTodaySelectionsInput, HabitUncheckedCreateWithoutTodaySelectionsInput>
    connectOrCreate?: HabitCreateOrConnectWithoutTodaySelectionsInput
    upsert?: HabitUpsertWithoutTodaySelectionsInput
    disconnect?: HabitWhereInput | boolean
    delete?: HabitWhereInput | boolean
    connect?: HabitWhereUniqueInput
    update?: XOR<XOR<HabitUpdateToOneWithWhereWithoutTodaySelectionsInput, HabitUpdateWithoutTodaySelectionsInput>, HabitUncheckedUpdateWithoutTodaySelectionsInput>
  }

  export type TaskUpdateOneWithoutTodaySelectionsNestedInput = {
    create?: XOR<TaskCreateWithoutTodaySelectionsInput, TaskUncheckedCreateWithoutTodaySelectionsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutTodaySelectionsInput
    upsert?: TaskUpsertWithoutTodaySelectionsInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutTodaySelectionsInput, TaskUpdateWithoutTodaySelectionsInput>, TaskUncheckedUpdateWithoutTodaySelectionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumToneFilter<$PrismaModel = never> = {
    equals?: $Enums.Tone | EnumToneFieldRefInput<$PrismaModel>
    in?: $Enums.Tone[] | ListEnumToneFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tone[] | ListEnumToneFieldRefInput<$PrismaModel>
    not?: NestedEnumToneFilter<$PrismaModel> | $Enums.Tone
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanFilter<$PrismaModel> | $Enums.Plan
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumToneWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Tone | EnumToneFieldRefInput<$PrismaModel>
    in?: $Enums.Tone[] | ListEnumToneFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tone[] | ListEnumToneFieldRefInput<$PrismaModel>
    not?: NestedEnumToneWithAggregatesFilter<$PrismaModel> | $Enums.Tone
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumToneFilter<$PrismaModel>
    _max?: NestedEnumToneFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanWithAggregatesFilter<$PrismaModel> | $Enums.Plan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanFilter<$PrismaModel>
    _max?: NestedEnumPlanFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type HabitCreateWithoutUserInput = {
    id?: string
    title: string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: number
    lastTick?: Date | string | null
    color?: string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: boolean
    reminderTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todaySelections?: TodaySelectionCreateNestedManyWithoutHabitInput
  }

  export type HabitUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: number
    lastTick?: Date | string | null
    color?: string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: boolean
    reminderTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutHabitInput
  }

  export type HabitCreateOrConnectWithoutUserInput = {
    where: HabitWhereUniqueInput
    create: XOR<HabitCreateWithoutUserInput, HabitUncheckedCreateWithoutUserInput>
  }

  export type HabitCreateManyUserInputEnvelope = {
    data: HabitCreateManyUserInput | HabitCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AntiHabitCreateWithoutUserInput = {
    id?: string
    name: string
    targetMins?: number
    cleanStreak?: number
    lastSlip?: Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntiHabitUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    targetMins?: number
    cleanStreak?: number
    lastSlip?: Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntiHabitCreateOrConnectWithoutUserInput = {
    where: AntiHabitWhereUniqueInput
    create: XOR<AntiHabitCreateWithoutUserInput, AntiHabitUncheckedCreateWithoutUserInput>
  }

  export type AntiHabitCreateManyUserInputEnvelope = {
    data: AntiHabitCreateManyUserInput | AntiHabitCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AlarmCreateWithoutUserInput = {
    id?: string
    label: string
    rrule: string
    tone?: $Enums.Tone
    enabled?: boolean
    nextRun?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlarmUncheckedCreateWithoutUserInput = {
    id?: string
    label: string
    rrule: string
    tone?: $Enums.Tone
    enabled?: boolean
    nextRun?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlarmCreateOrConnectWithoutUserInput = {
    where: AlarmWhereUniqueInput
    create: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput>
  }

  export type AlarmCreateManyUserInputEnvelope = {
    data: AlarmCreateManyUserInput | AlarmCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutUserInput = {
    id?: string
    ts?: Date | string
    type: string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: Uint8Array | null
  }

  export type EventUncheckedCreateWithoutUserInput = {
    id?: string
    ts?: Date | string
    type: string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: Uint8Array | null
  }

  export type EventCreateOrConnectWithoutUserInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput>
  }

  export type EventCreateManyUserInputEnvelope = {
    data: EventCreateManyUserInput | EventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserFactsCreateWithoutUserInput = {
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type UserFactsUncheckedCreateWithoutUserInput = {
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type UserFactsCreateOrConnectWithoutUserInput = {
    where: UserFactsWhereUniqueInput
    create: XOR<UserFactsCreateWithoutUserInput, UserFactsUncheckedCreateWithoutUserInput>
  }

  export type TaskCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: number
    category?: string | null
    completed?: boolean
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todaySelections?: TodaySelectionCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: number
    category?: string | null
    completed?: boolean
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutUserInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput>
  }

  export type TaskCreateManyUserInputEnvelope = {
    data: TaskCreateManyUserInput | TaskCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TodaySelectionCreateWithoutUserInput = {
    id?: string
    date: string
    order?: number
    createdAt?: Date | string
    habit?: HabitCreateNestedOneWithoutTodaySelectionsInput
    task?: TaskCreateNestedOneWithoutTodaySelectionsInput
  }

  export type TodaySelectionUncheckedCreateWithoutUserInput = {
    id?: string
    habitId?: string | null
    taskId?: string | null
    date: string
    order?: number
    createdAt?: Date | string
  }

  export type TodaySelectionCreateOrConnectWithoutUserInput = {
    where: TodaySelectionWhereUniqueInput
    create: XOR<TodaySelectionCreateWithoutUserInput, TodaySelectionUncheckedCreateWithoutUserInput>
  }

  export type TodaySelectionCreateManyUserInputEnvelope = {
    data: TodaySelectionCreateManyUserInput | TodaySelectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HabitUpsertWithWhereUniqueWithoutUserInput = {
    where: HabitWhereUniqueInput
    update: XOR<HabitUpdateWithoutUserInput, HabitUncheckedUpdateWithoutUserInput>
    create: XOR<HabitCreateWithoutUserInput, HabitUncheckedCreateWithoutUserInput>
  }

  export type HabitUpdateWithWhereUniqueWithoutUserInput = {
    where: HabitWhereUniqueInput
    data: XOR<HabitUpdateWithoutUserInput, HabitUncheckedUpdateWithoutUserInput>
  }

  export type HabitUpdateManyWithWhereWithoutUserInput = {
    where: HabitScalarWhereInput
    data: XOR<HabitUpdateManyMutationInput, HabitUncheckedUpdateManyWithoutUserInput>
  }

  export type HabitScalarWhereInput = {
    AND?: HabitScalarWhereInput | HabitScalarWhereInput[]
    OR?: HabitScalarWhereInput[]
    NOT?: HabitScalarWhereInput | HabitScalarWhereInput[]
    id?: StringFilter<"Habit"> | string
    userId?: StringFilter<"Habit"> | string
    title?: StringFilter<"Habit"> | string
    schedule?: JsonFilter<"Habit">
    streak?: IntFilter<"Habit"> | number
    lastTick?: DateTimeNullableFilter<"Habit"> | Date | string | null
    color?: StringFilter<"Habit"> | string
    context?: JsonFilter<"Habit">
    reminderEnabled?: BoolFilter<"Habit"> | boolean
    reminderTime?: StringNullableFilter<"Habit"> | string | null
    createdAt?: DateTimeFilter<"Habit"> | Date | string
    updatedAt?: DateTimeFilter<"Habit"> | Date | string
  }

  export type AntiHabitUpsertWithWhereUniqueWithoutUserInput = {
    where: AntiHabitWhereUniqueInput
    update: XOR<AntiHabitUpdateWithoutUserInput, AntiHabitUncheckedUpdateWithoutUserInput>
    create: XOR<AntiHabitCreateWithoutUserInput, AntiHabitUncheckedCreateWithoutUserInput>
  }

  export type AntiHabitUpdateWithWhereUniqueWithoutUserInput = {
    where: AntiHabitWhereUniqueInput
    data: XOR<AntiHabitUpdateWithoutUserInput, AntiHabitUncheckedUpdateWithoutUserInput>
  }

  export type AntiHabitUpdateManyWithWhereWithoutUserInput = {
    where: AntiHabitScalarWhereInput
    data: XOR<AntiHabitUpdateManyMutationInput, AntiHabitUncheckedUpdateManyWithoutUserInput>
  }

  export type AntiHabitScalarWhereInput = {
    AND?: AntiHabitScalarWhereInput | AntiHabitScalarWhereInput[]
    OR?: AntiHabitScalarWhereInput[]
    NOT?: AntiHabitScalarWhereInput | AntiHabitScalarWhereInput[]
    id?: StringFilter<"AntiHabit"> | string
    userId?: StringFilter<"AntiHabit"> | string
    name?: StringFilter<"AntiHabit"> | string
    targetMins?: IntFilter<"AntiHabit"> | number
    cleanStreak?: IntFilter<"AntiHabit"> | number
    lastSlip?: DateTimeNullableFilter<"AntiHabit"> | Date | string | null
    dangerWin?: JsonNullableFilter<"AntiHabit">
    createdAt?: DateTimeFilter<"AntiHabit"> | Date | string
    updatedAt?: DateTimeFilter<"AntiHabit"> | Date | string
  }

  export type AlarmUpsertWithWhereUniqueWithoutUserInput = {
    where: AlarmWhereUniqueInput
    update: XOR<AlarmUpdateWithoutUserInput, AlarmUncheckedUpdateWithoutUserInput>
    create: XOR<AlarmCreateWithoutUserInput, AlarmUncheckedCreateWithoutUserInput>
  }

  export type AlarmUpdateWithWhereUniqueWithoutUserInput = {
    where: AlarmWhereUniqueInput
    data: XOR<AlarmUpdateWithoutUserInput, AlarmUncheckedUpdateWithoutUserInput>
  }

  export type AlarmUpdateManyWithWhereWithoutUserInput = {
    where: AlarmScalarWhereInput
    data: XOR<AlarmUpdateManyMutationInput, AlarmUncheckedUpdateManyWithoutUserInput>
  }

  export type AlarmScalarWhereInput = {
    AND?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
    OR?: AlarmScalarWhereInput[]
    NOT?: AlarmScalarWhereInput | AlarmScalarWhereInput[]
    id?: StringFilter<"Alarm"> | string
    userId?: StringFilter<"Alarm"> | string
    label?: StringFilter<"Alarm"> | string
    rrule?: StringFilter<"Alarm"> | string
    tone?: EnumToneFilter<"Alarm"> | $Enums.Tone
    enabled?: BoolFilter<"Alarm"> | boolean
    nextRun?: DateTimeNullableFilter<"Alarm"> | Date | string | null
    createdAt?: DateTimeFilter<"Alarm"> | Date | string
    updatedAt?: DateTimeFilter<"Alarm"> | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutUserInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutUserInput, EventUncheckedUpdateWithoutUserInput>
    create: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput>
  }

  export type EventUpdateWithWhereUniqueWithoutUserInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutUserInput, EventUncheckedUpdateWithoutUserInput>
  }

  export type EventUpdateManyWithWhereWithoutUserInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutUserInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    userId?: StringFilter<"Event"> | string
    ts?: DateTimeFilter<"Event"> | Date | string
    type?: StringFilter<"Event"> | string
    payload?: JsonFilter<"Event">
    embedding?: BytesNullableFilter<"Event"> | Uint8Array | null
  }

  export type UserFactsUpsertWithoutUserInput = {
    update: XOR<UserFactsUpdateWithoutUserInput, UserFactsUncheckedUpdateWithoutUserInput>
    create: XOR<UserFactsCreateWithoutUserInput, UserFactsUncheckedCreateWithoutUserInput>
    where?: UserFactsWhereInput
  }

  export type UserFactsUpdateToOneWithWhereWithoutUserInput = {
    where?: UserFactsWhereInput
    data: XOR<UserFactsUpdateWithoutUserInput, UserFactsUncheckedUpdateWithoutUserInput>
  }

  export type UserFactsUpdateWithoutUserInput = {
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFactsUncheckedUpdateWithoutUserInput = {
    json?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpsertWithWhereUniqueWithoutUserInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutUserInput, TaskUncheckedUpdateWithoutUserInput>
    create: XOR<TaskCreateWithoutUserInput, TaskUncheckedCreateWithoutUserInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutUserInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutUserInput, TaskUncheckedUpdateWithoutUserInput>
  }

  export type TaskUpdateManyWithWhereWithoutUserInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutUserInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    userId?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    schedule?: JsonFilter<"Task">
    priority?: IntFilter<"Task"> | number
    category?: StringNullableFilter<"Task"> | string | null
    completed?: BoolFilter<"Task"> | boolean
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
  }

  export type TodaySelectionUpsertWithWhereUniqueWithoutUserInput = {
    where: TodaySelectionWhereUniqueInput
    update: XOR<TodaySelectionUpdateWithoutUserInput, TodaySelectionUncheckedUpdateWithoutUserInput>
    create: XOR<TodaySelectionCreateWithoutUserInput, TodaySelectionUncheckedCreateWithoutUserInput>
  }

  export type TodaySelectionUpdateWithWhereUniqueWithoutUserInput = {
    where: TodaySelectionWhereUniqueInput
    data: XOR<TodaySelectionUpdateWithoutUserInput, TodaySelectionUncheckedUpdateWithoutUserInput>
  }

  export type TodaySelectionUpdateManyWithWhereWithoutUserInput = {
    where: TodaySelectionScalarWhereInput
    data: XOR<TodaySelectionUpdateManyMutationInput, TodaySelectionUncheckedUpdateManyWithoutUserInput>
  }

  export type TodaySelectionScalarWhereInput = {
    AND?: TodaySelectionScalarWhereInput | TodaySelectionScalarWhereInput[]
    OR?: TodaySelectionScalarWhereInput[]
    NOT?: TodaySelectionScalarWhereInput | TodaySelectionScalarWhereInput[]
    id?: StringFilter<"TodaySelection"> | string
    userId?: StringFilter<"TodaySelection"> | string
    habitId?: StringNullableFilter<"TodaySelection"> | string | null
    taskId?: StringNullableFilter<"TodaySelection"> | string | null
    date?: StringFilter<"TodaySelection"> | string
    order?: IntFilter<"TodaySelection"> | number
    createdAt?: DateTimeFilter<"TodaySelection"> | Date | string
  }

  export type UserCreateWithoutHabitsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    antiHabits?: AntiHabitCreateNestedManyWithoutUserInput
    alarms?: AlarmCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    userFacts?: UserFactsCreateNestedOneWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHabitsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    antiHabits?: AntiHabitUncheckedCreateNestedManyWithoutUserInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    userFacts?: UserFactsUncheckedCreateNestedOneWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHabitsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHabitsInput, UserUncheckedCreateWithoutHabitsInput>
  }

  export type TodaySelectionCreateWithoutHabitInput = {
    id?: string
    date: string
    order?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTodaySelectionsInput
    task?: TaskCreateNestedOneWithoutTodaySelectionsInput
  }

  export type TodaySelectionUncheckedCreateWithoutHabitInput = {
    id?: string
    userId: string
    taskId?: string | null
    date: string
    order?: number
    createdAt?: Date | string
  }

  export type TodaySelectionCreateOrConnectWithoutHabitInput = {
    where: TodaySelectionWhereUniqueInput
    create: XOR<TodaySelectionCreateWithoutHabitInput, TodaySelectionUncheckedCreateWithoutHabitInput>
  }

  export type TodaySelectionCreateManyHabitInputEnvelope = {
    data: TodaySelectionCreateManyHabitInput | TodaySelectionCreateManyHabitInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutHabitsInput = {
    update: XOR<UserUpdateWithoutHabitsInput, UserUncheckedUpdateWithoutHabitsInput>
    create: XOR<UserCreateWithoutHabitsInput, UserUncheckedCreateWithoutHabitsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHabitsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHabitsInput, UserUncheckedUpdateWithoutHabitsInput>
  }

  export type UserUpdateWithoutHabitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    antiHabits?: AntiHabitUpdateManyWithoutUserNestedInput
    alarms?: AlarmUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUpdateOneWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHabitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    antiHabits?: AntiHabitUncheckedUpdateManyWithoutUserNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUncheckedUpdateOneWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TodaySelectionUpsertWithWhereUniqueWithoutHabitInput = {
    where: TodaySelectionWhereUniqueInput
    update: XOR<TodaySelectionUpdateWithoutHabitInput, TodaySelectionUncheckedUpdateWithoutHabitInput>
    create: XOR<TodaySelectionCreateWithoutHabitInput, TodaySelectionUncheckedCreateWithoutHabitInput>
  }

  export type TodaySelectionUpdateWithWhereUniqueWithoutHabitInput = {
    where: TodaySelectionWhereUniqueInput
    data: XOR<TodaySelectionUpdateWithoutHabitInput, TodaySelectionUncheckedUpdateWithoutHabitInput>
  }

  export type TodaySelectionUpdateManyWithWhereWithoutHabitInput = {
    where: TodaySelectionScalarWhereInput
    data: XOR<TodaySelectionUpdateManyMutationInput, TodaySelectionUncheckedUpdateManyWithoutHabitInput>
  }

  export type UserCreateWithoutAntiHabitsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitCreateNestedManyWithoutUserInput
    alarms?: AlarmCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    userFacts?: UserFactsCreateNestedOneWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAntiHabitsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutUserInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    userFacts?: UserFactsUncheckedCreateNestedOneWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAntiHabitsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAntiHabitsInput, UserUncheckedCreateWithoutAntiHabitsInput>
  }

  export type UserUpsertWithoutAntiHabitsInput = {
    update: XOR<UserUpdateWithoutAntiHabitsInput, UserUncheckedUpdateWithoutAntiHabitsInput>
    create: XOR<UserCreateWithoutAntiHabitsInput, UserUncheckedCreateWithoutAntiHabitsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAntiHabitsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAntiHabitsInput, UserUncheckedUpdateWithoutAntiHabitsInput>
  }

  export type UserUpdateWithoutAntiHabitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUpdateManyWithoutUserNestedInput
    alarms?: AlarmUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUpdateOneWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAntiHabitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutUserNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUncheckedUpdateOneWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAlarmsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    userFacts?: UserFactsCreateNestedOneWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAlarmsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    userFacts?: UserFactsUncheckedCreateNestedOneWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAlarmsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlarmsInput, UserUncheckedCreateWithoutAlarmsInput>
  }

  export type UserUpsertWithoutAlarmsInput = {
    update: XOR<UserUpdateWithoutAlarmsInput, UserUncheckedUpdateWithoutAlarmsInput>
    create: XOR<UserCreateWithoutAlarmsInput, UserUncheckedCreateWithoutAlarmsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAlarmsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAlarmsInput, UserUncheckedUpdateWithoutAlarmsInput>
  }

  export type UserUpdateWithoutAlarmsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUpdateOneWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAlarmsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUncheckedUpdateOneWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutEventsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitCreateNestedManyWithoutUserInput
    alarms?: AlarmCreateNestedManyWithoutUserInput
    userFacts?: UserFactsCreateNestedOneWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEventsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitUncheckedCreateNestedManyWithoutUserInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutUserInput
    userFacts?: UserFactsUncheckedCreateNestedOneWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
  }

  export type UserUpsertWithoutEventsInput = {
    update: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUpdateManyWithoutUserNestedInput
    alarms?: AlarmUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUpdateOneWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUncheckedUpdateManyWithoutUserNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUncheckedUpdateOneWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserFactsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitCreateNestedManyWithoutUserInput
    alarms?: AlarmCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserFactsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitUncheckedCreateNestedManyWithoutUserInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserFactsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserFactsInput, UserUncheckedCreateWithoutUserFactsInput>
  }

  export type UserUpsertWithoutUserFactsInput = {
    update: XOR<UserUpdateWithoutUserFactsInput, UserUncheckedUpdateWithoutUserFactsInput>
    create: XOR<UserCreateWithoutUserFactsInput, UserUncheckedCreateWithoutUserFactsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserFactsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserFactsInput, UserUncheckedUpdateWithoutUserFactsInput>
  }

  export type UserUpdateWithoutUserFactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUpdateManyWithoutUserNestedInput
    alarms?: AlarmUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserFactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUncheckedUpdateManyWithoutUserNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTasksInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitCreateNestedManyWithoutUserInput
    alarms?: AlarmCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    userFacts?: UserFactsCreateNestedOneWithoutUserInput
    todaySelections?: TodaySelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTasksInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitUncheckedCreateNestedManyWithoutUserInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    userFacts?: UserFactsUncheckedCreateNestedOneWithoutUserInput
    todaySelections?: TodaySelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
  }

  export type TodaySelectionCreateWithoutTaskInput = {
    id?: string
    date: string
    order?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTodaySelectionsInput
    habit?: HabitCreateNestedOneWithoutTodaySelectionsInput
  }

  export type TodaySelectionUncheckedCreateWithoutTaskInput = {
    id?: string
    userId: string
    habitId?: string | null
    date: string
    order?: number
    createdAt?: Date | string
  }

  export type TodaySelectionCreateOrConnectWithoutTaskInput = {
    where: TodaySelectionWhereUniqueInput
    create: XOR<TodaySelectionCreateWithoutTaskInput, TodaySelectionUncheckedCreateWithoutTaskInput>
  }

  export type TodaySelectionCreateManyTaskInputEnvelope = {
    data: TodaySelectionCreateManyTaskInput | TodaySelectionCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTasksInput = {
    update: XOR<UserUpdateWithoutTasksInput, UserUncheckedUpdateWithoutTasksInput>
    create: XOR<UserCreateWithoutTasksInput, UserUncheckedCreateWithoutTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTasksInput, UserUncheckedUpdateWithoutTasksInput>
  }

  export type UserUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUpdateManyWithoutUserNestedInput
    alarms?: AlarmUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUpdateOneWithoutUserNestedInput
    todaySelections?: TodaySelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUncheckedUpdateManyWithoutUserNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUncheckedUpdateOneWithoutUserNestedInput
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TodaySelectionUpsertWithWhereUniqueWithoutTaskInput = {
    where: TodaySelectionWhereUniqueInput
    update: XOR<TodaySelectionUpdateWithoutTaskInput, TodaySelectionUncheckedUpdateWithoutTaskInput>
    create: XOR<TodaySelectionCreateWithoutTaskInput, TodaySelectionUncheckedCreateWithoutTaskInput>
  }

  export type TodaySelectionUpdateWithWhereUniqueWithoutTaskInput = {
    where: TodaySelectionWhereUniqueInput
    data: XOR<TodaySelectionUpdateWithoutTaskInput, TodaySelectionUncheckedUpdateWithoutTaskInput>
  }

  export type TodaySelectionUpdateManyWithWhereWithoutTaskInput = {
    where: TodaySelectionScalarWhereInput
    data: XOR<TodaySelectionUpdateManyMutationInput, TodaySelectionUncheckedUpdateManyWithoutTaskInput>
  }

  export type UserCreateWithoutTodaySelectionsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitCreateNestedManyWithoutUserInput
    alarms?: AlarmCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    userFacts?: UserFactsCreateNestedOneWithoutUserInput
    tasks?: TaskCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTodaySelectionsInput = {
    id?: string
    email?: string | null
    tz?: string
    tone?: $Enums.Tone
    intensity?: number
    consentRoast?: boolean
    safeWord?: string | null
    plan?: $Enums.Plan
    mentorId?: string | null
    fcmToken?: string | null
    nudgesEnabled?: boolean
    briefsEnabled?: boolean
    debriefsEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    habits?: HabitUncheckedCreateNestedManyWithoutUserInput
    antiHabits?: AntiHabitUncheckedCreateNestedManyWithoutUserInput
    alarms?: AlarmUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    userFacts?: UserFactsUncheckedCreateNestedOneWithoutUserInput
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTodaySelectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTodaySelectionsInput, UserUncheckedCreateWithoutTodaySelectionsInput>
  }

  export type HabitCreateWithoutTodaySelectionsInput = {
    id?: string
    title: string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: number
    lastTick?: Date | string | null
    color?: string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: boolean
    reminderTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHabitsInput
  }

  export type HabitUncheckedCreateWithoutTodaySelectionsInput = {
    id?: string
    userId: string
    title: string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: number
    lastTick?: Date | string | null
    color?: string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: boolean
    reminderTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitCreateOrConnectWithoutTodaySelectionsInput = {
    where: HabitWhereUniqueInput
    create: XOR<HabitCreateWithoutTodaySelectionsInput, HabitUncheckedCreateWithoutTodaySelectionsInput>
  }

  export type TaskCreateWithoutTodaySelectionsInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: number
    category?: string | null
    completed?: boolean
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutTodaySelectionsInput = {
    id?: string
    userId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: number
    category?: string | null
    completed?: boolean
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutTodaySelectionsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutTodaySelectionsInput, TaskUncheckedCreateWithoutTodaySelectionsInput>
  }

  export type UserUpsertWithoutTodaySelectionsInput = {
    update: XOR<UserUpdateWithoutTodaySelectionsInput, UserUncheckedUpdateWithoutTodaySelectionsInput>
    create: XOR<UserCreateWithoutTodaySelectionsInput, UserUncheckedCreateWithoutTodaySelectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTodaySelectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTodaySelectionsInput, UserUncheckedUpdateWithoutTodaySelectionsInput>
  }

  export type UserUpdateWithoutTodaySelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUpdateManyWithoutUserNestedInput
    alarms?: AlarmUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUpdateOneWithoutUserNestedInput
    tasks?: TaskUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTodaySelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tz?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    intensity?: IntFieldUpdateOperationsInput | number
    consentRoast?: BoolFieldUpdateOperationsInput | boolean
    safeWord?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    mentorId?: NullableStringFieldUpdateOperationsInput | string | null
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    nudgesEnabled?: BoolFieldUpdateOperationsInput | boolean
    briefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    debriefsEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habits?: HabitUncheckedUpdateManyWithoutUserNestedInput
    antiHabits?: AntiHabitUncheckedUpdateManyWithoutUserNestedInput
    alarms?: AlarmUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    userFacts?: UserFactsUncheckedUpdateOneWithoutUserNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HabitUpsertWithoutTodaySelectionsInput = {
    update: XOR<HabitUpdateWithoutTodaySelectionsInput, HabitUncheckedUpdateWithoutTodaySelectionsInput>
    create: XOR<HabitCreateWithoutTodaySelectionsInput, HabitUncheckedCreateWithoutTodaySelectionsInput>
    where?: HabitWhereInput
  }

  export type HabitUpdateToOneWithWhereWithoutTodaySelectionsInput = {
    where?: HabitWhereInput
    data: XOR<HabitUpdateWithoutTodaySelectionsInput, HabitUncheckedUpdateWithoutTodaySelectionsInput>
  }

  export type HabitUpdateWithoutTodaySelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: IntFieldUpdateOperationsInput | number
    lastTick?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    color?: StringFieldUpdateOperationsInput | string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: BoolFieldUpdateOperationsInput | boolean
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHabitsNestedInput
  }

  export type HabitUncheckedUpdateWithoutTodaySelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: IntFieldUpdateOperationsInput | number
    lastTick?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    color?: StringFieldUpdateOperationsInput | string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: BoolFieldUpdateOperationsInput | boolean
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpsertWithoutTodaySelectionsInput = {
    update: XOR<TaskUpdateWithoutTodaySelectionsInput, TaskUncheckedUpdateWithoutTodaySelectionsInput>
    create: XOR<TaskCreateWithoutTodaySelectionsInput, TaskUncheckedCreateWithoutTodaySelectionsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutTodaySelectionsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutTodaySelectionsInput, TaskUncheckedUpdateWithoutTodaySelectionsInput>
  }

  export type TaskUpdateWithoutTodaySelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutTodaySelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitCreateManyUserInput = {
    id?: string
    title: string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: number
    lastTick?: Date | string | null
    color?: string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: boolean
    reminderTime?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntiHabitCreateManyUserInput = {
    id?: string
    name: string
    targetMins?: number
    cleanStreak?: number
    lastSlip?: Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlarmCreateManyUserInput = {
    id?: string
    label: string
    rrule: string
    tone?: $Enums.Tone
    enabled?: boolean
    nextRun?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateManyUserInput = {
    id?: string
    ts?: Date | string
    type: string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: Uint8Array | null
  }

  export type TaskCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: number
    category?: string | null
    completed?: boolean
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodaySelectionCreateManyUserInput = {
    id?: string
    habitId?: string | null
    taskId?: string | null
    date: string
    order?: number
    createdAt?: Date | string
  }

  export type HabitUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: IntFieldUpdateOperationsInput | number
    lastTick?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    color?: StringFieldUpdateOperationsInput | string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: BoolFieldUpdateOperationsInput | boolean
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todaySelections?: TodaySelectionUpdateManyWithoutHabitNestedInput
  }

  export type HabitUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: IntFieldUpdateOperationsInput | number
    lastTick?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    color?: StringFieldUpdateOperationsInput | string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: BoolFieldUpdateOperationsInput | boolean
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutHabitNestedInput
  }

  export type HabitUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    schedule?: JsonNullValueInput | InputJsonValue
    streak?: IntFieldUpdateOperationsInput | number
    lastTick?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    color?: StringFieldUpdateOperationsInput | string
    context?: JsonNullValueInput | InputJsonValue
    reminderEnabled?: BoolFieldUpdateOperationsInput | boolean
    reminderTime?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntiHabitUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    targetMins?: IntFieldUpdateOperationsInput | number
    cleanStreak?: IntFieldUpdateOperationsInput | number
    lastSlip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntiHabitUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    targetMins?: IntFieldUpdateOperationsInput | number
    cleanStreak?: IntFieldUpdateOperationsInput | number
    lastSlip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AntiHabitUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    targetMins?: IntFieldUpdateOperationsInput | number
    cleanStreak?: IntFieldUpdateOperationsInput | number
    lastSlip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dangerWin?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    rrule?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    enabled?: BoolFieldUpdateOperationsInput | boolean
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    rrule?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    enabled?: BoolFieldUpdateOperationsInput | boolean
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlarmUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    rrule?: StringFieldUpdateOperationsInput | string
    tone?: EnumToneFieldUpdateOperationsInput | $Enums.Tone
    enabled?: BoolFieldUpdateOperationsInput | boolean
    nextRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type EventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type EventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    embedding?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type TaskUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todaySelections?: TodaySelectionUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    todaySelections?: TodaySelectionUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedule?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodaySelectionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    habit?: HabitUpdateOneWithoutTodaySelectionsNestedInput
    task?: TaskUpdateOneWithoutTodaySelectionsNestedInput
  }

  export type TodaySelectionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    habitId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodaySelectionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    habitId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodaySelectionCreateManyHabitInput = {
    id?: string
    userId: string
    taskId?: string | null
    date: string
    order?: number
    createdAt?: Date | string
  }

  export type TodaySelectionUpdateWithoutHabitInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTodaySelectionsNestedInput
    task?: TaskUpdateOneWithoutTodaySelectionsNestedInput
  }

  export type TodaySelectionUncheckedUpdateWithoutHabitInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodaySelectionUncheckedUpdateManyWithoutHabitInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodaySelectionCreateManyTaskInput = {
    id?: string
    userId: string
    habitId?: string | null
    date: string
    order?: number
    createdAt?: Date | string
  }

  export type TodaySelectionUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTodaySelectionsNestedInput
    habit?: HabitUpdateOneWithoutTodaySelectionsNestedInput
  }

  export type TodaySelectionUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    habitId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodaySelectionUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    habitId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}