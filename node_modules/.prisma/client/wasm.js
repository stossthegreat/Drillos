
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  tz: 'tz',
  tone: 'tone',
  intensity: 'intensity',
  consentRoast: 'consentRoast',
  safeWord: 'safeWord',
  plan: 'plan',
  mentorId: 'mentorId',
  fcmToken: 'fcmToken',
  nudgesEnabled: 'nudgesEnabled',
  briefsEnabled: 'briefsEnabled',
  debriefsEnabled: 'debriefsEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HabitScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  schedule: 'schedule',
  streak: 'streak',
  lastTick: 'lastTick',
  color: 'color',
  context: 'context',
  reminderEnabled: 'reminderEnabled',
  reminderTime: 'reminderTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AntiHabitScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  targetMins: 'targetMins',
  cleanStreak: 'cleanStreak',
  lastSlip: 'lastSlip',
  dangerWin: 'dangerWin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlarmScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  label: 'label',
  rrule: 'rrule',
  tone: 'tone',
  enabled: 'enabled',
  nextRun: 'nextRun',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ts: 'ts',
  type: 'type',
  payload: 'payload',
  embedding: 'embedding'
};

exports.Prisma.UserFactsScalarFieldEnum = {
  userId: 'userId',
  json: 'json',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  schedule: 'schedule',
  priority: 'priority',
  category: 'category',
  completed: 'completed',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TodaySelectionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  habitId: 'habitId',
  taskId: 'taskId',
  date: 'date',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.VoiceCacheScalarFieldEnum = {
  id: 'id',
  text: 'text',
  voice: 'voice',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Plan = exports.$Enums.Plan = {
  FREE: 'FREE',
  PRO: 'PRO'
};

exports.Tone = exports.$Enums.Tone = {
  strict: 'strict',
  balanced: 'balanced',
  light: 'light'
};

exports.Prisma.ModelName = {
  User: 'User',
  Habit: 'Habit',
  AntiHabit: 'AntiHabit',
  Alarm: 'Alarm',
  Event: 'Event',
  UserFacts: 'UserFacts',
  Task: 'Task',
  TodaySelection: 'TodaySelection',
  VoiceCache: 'VoiceCache'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/felix/drillos/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "linux-arm64-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/felix/drillos/backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../backend/.env"
  },
  "relativePath": "../../../backend/prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Plan {\n  FREE\n  PRO\n}\n\nenum Tone {\n  strict\n  balanced\n  light\n}\n\nmodel User {\n  id           String  @id @default(cuid())\n  email        String? @unique\n  tz           String  @default(\"Europe/London\")\n  tone         Tone    @default(balanced)\n  intensity    Int     @default(2)\n  consentRoast Boolean @default(false)\n  safeWord     String?\n  plan         Plan    @default(FREE)\n\n  // NEW: OS-specific fields\n  mentorId        String? // e.g. \"marcus\" | \"drill\" | \"confucius\" | \"lincoln\" | \"buddha\"\n  fcmToken        String? // Firebase Cloud Messaging token for push\n  nudgesEnabled   Boolean @default(true)\n  briefsEnabled   Boolean @default(true)\n  debriefsEnabled Boolean @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  habits          Habit[]\n  antiHabits      AntiHabit[]\n  alarms          Alarm[]\n  events          Event[]\n  userFacts       UserFacts?\n  tasks           Task[]\n  todaySelections TodaySelection[]\n}\n\nmodel Habit {\n  id              String    @id @default(cuid())\n  userId          String\n  title           String\n  schedule        Json      @default(\"{}\")\n  streak          Int       @default(0)\n  lastTick        DateTime?\n  color           String    @default(\"emerald\")\n  context         Json      @default(\"{}\")\n  reminderEnabled Boolean   @default(false)\n  reminderTime    String?   @default(\"08:00\")\n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n\n  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n  todaySelections TodaySelection[]\n\n  @@index([userId])\n}\n\nmodel AntiHabit {\n  id          String    @id @default(cuid())\n  userId      String\n  name        String\n  targetMins  Int       @default(10)\n  cleanStreak Int       @default(0)\n  lastSlip    DateTime?\n  dangerWin   Json?     @default(\"{}\")\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n}\n\nmodel Alarm {\n  id        String    @id @default(cuid())\n  userId    String\n  label     String\n  rrule     String\n  tone      Tone      @default(balanced)\n  enabled   Boolean   @default(true)\n  nextRun   DateTime?\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([nextRun])\n}\n\nmodel Event {\n  id        String   @id @default(cuid())\n  userId    String\n  ts        DateTime @default(now())\n  type      String\n  payload   Json     @default(\"{}\")\n  embedding Bytes?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId, ts])\n  @@index([type])\n}\n\nmodel UserFacts {\n  userId    String   @id\n  json      Json     @default(\"{}\")\n  updatedAt DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel Task {\n  id          String    @id @default(cuid())\n  userId      String\n  title       String\n  description String?\n  dueDate     DateTime?\n  schedule    Json      @default(\"{}\")\n  priority    Int       @default(1)\n  category    String?\n  completed   Boolean   @default(false)\n  completedAt DateTime?\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n\n  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n  todaySelections TodaySelection[]\n\n  @@index([userId])\n}\n\nmodel TodaySelection {\n  id        String   @id @default(cuid())\n  userId    String\n  habitId   String?\n  taskId    String?\n  date      String // YYYY-MM-DD format\n  order     Int      @default(0)\n  createdAt DateTime @default(now())\n\n  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  habit Habit? @relation(fields: [habitId], references: [id], onDelete: Cascade)\n  task  Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)\n\n  @@index([userId, date])\n}\n\nmodel VoiceCache {\n  id        String   @id\n  text      String\n  voice     String\n  url       String\n  createdAt DateTime @default(now())\n\n  @@index([createdAt])\n}\n",
  "inlineSchemaHash": "0b739a9040702e068d694918f5424600d1c1f7b1ec92133d22b300c2b7499840",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tz\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tone\",\"kind\":\"enum\",\"type\":\"Tone\"},{\"name\":\"intensity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"consentRoast\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"safeWord\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"plan\",\"kind\":\"enum\",\"type\":\"Plan\"},{\"name\":\"mentorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fcmToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nudgesEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"briefsEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"debriefsEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"habits\",\"kind\":\"object\",\"type\":\"Habit\",\"relationName\":\"HabitToUser\"},{\"name\":\"antiHabits\",\"kind\":\"object\",\"type\":\"AntiHabit\",\"relationName\":\"AntiHabitToUser\"},{\"name\":\"alarms\",\"kind\":\"object\",\"type\":\"Alarm\",\"relationName\":\"AlarmToUser\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToUser\"},{\"name\":\"userFacts\",\"kind\":\"object\",\"type\":\"UserFacts\",\"relationName\":\"UserToUserFacts\"},{\"name\":\"tasks\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskToUser\"},{\"name\":\"todaySelections\",\"kind\":\"object\",\"type\":\"TodaySelection\",\"relationName\":\"TodaySelectionToUser\"}],\"dbName\":null},\"Habit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schedule\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"streak\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastTick\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"context\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"reminderEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"reminderTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"HabitToUser\"},{\"name\":\"todaySelections\",\"kind\":\"object\",\"type\":\"TodaySelection\",\"relationName\":\"HabitToTodaySelection\"}],\"dbName\":null},\"AntiHabit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetMins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cleanStreak\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastSlip\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"dangerWin\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AntiHabitToUser\"}],\"dbName\":null},\"Alarm\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rrule\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tone\",\"kind\":\"enum\",\"type\":\"Tone\"},{\"name\":\"enabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"nextRun\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AlarmToUser\"}],\"dbName\":null},\"Event\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ts\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"embedding\",\"kind\":\"scalar\",\"type\":\"Bytes\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EventToUser\"}],\"dbName\":null},\"UserFacts\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"json\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserFacts\"}],\"dbName\":null},\"Task\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"schedule\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"priority\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"completed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TaskToUser\"},{\"name\":\"todaySelections\",\"kind\":\"object\",\"type\":\"TodaySelection\",\"relationName\":\"TaskToTodaySelection\"}],\"dbName\":null},\"TodaySelection\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"habitId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"taskId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TodaySelectionToUser\"},{\"name\":\"habit\",\"kind\":\"object\",\"type\":\"Habit\",\"relationName\":\"HabitToTodaySelection\"},{\"name\":\"task\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskToTodaySelection\"}],\"dbName\":null},\"VoiceCache\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"voice\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

